Grammar

    0 $accept: program $end

    1 newline_or_stmt_star: %empty
    2                     | newline_or_stmt_star NEWLINE
    3                     | newline_or_stmt_star stmt

    4 opt_par_arglist: %empty
    5                | LPAR RPAR
    6                | LPAR arglist RPAR

    7 decorator_plus: decorator
    8               | decorator_plus decorator

    9 opt_arrow_test: %empty
   10               | ARROW test

   11 opt_type_comment: %empty
   12                 | TYPE_COMMENT

   13 comma_argument_star: %empty
   14                    | comma_argument_star COMMA opt_type_comment argument

   15 opt_assign_test: %empty
   16                | EQUAL test

   17 opt_comma: %empty
   18          | COMMA

   19 opt_colon_test: %empty
   20               | COLON test

   21 semi_small_stmt_star: %empty
   22                     | semi_small_stmt_star SEMICOLON small_stmt

   23 opt_semi: %empty
   24         | SEMICOLON

   25 assing_yield_or_test_plus: EQUAL yield_expr
   26                          | EQUAL testlist_star_expr
   27                          | assing_yield_or_test_plus EQUAL yield_expr
   28                          | assing_yield_or_test_plus EQUAL testlist_star_expr

   29 opt_assing_yield_or_test: %empty
   30                         | EQUAL yield_expr
   31                         | EQUAL testlist_star_expr

   32 comma_test_star_expr_star: %empty
   33                          | comma_test_star_expr_star COMMA test
   34                          | comma_test_star_expr_star COMMA star_expr

   35 opt_testlist_star_expr: %empty
   36                       | testlist_star_expr

   37 opt_as_name: %empty
   38            | AS NAME

   39 comma_import_as_name_star: %empty
   40                          | comma_import_as_name_star COMMA import_as_name

   41 comma_dotted_as_name_star: %empty
   42                          | comma_dotted_as_name_star COMMA dotted_as_name

   43 dot_name_star: %empty
   44              | dot_name_star DOT NAME

   45 comma_name_star: %empty
   46                | comma_name_star COMMA NAME

   47 opt_comma_test: %empty
   48               | COMMA test

   49 elif_test_suite_star: %empty
   50                     | elif_test_suite_star ELIF namedexpr_test COLON suite

   51 opt_else_suite: ELSE COLON suite

   52 comma_with_item_star: %empty
   53                     | comma_with_item_star COMMA with_item

   54 opt_as_expr: %empty
   55            | AS expr

   56 opt_test_as_name: %empty
   57                 | test opt_as_name

   58 stmt_plus: stmt
   59          | stmt_plus stmt

   60 opt_colonass_test: %empty
   61                  | COLONENQUAL test

   62 or_and_test_star: %empty
   63                 | or_and_test_star OR and_test

   64 and_not_test_star: %empty
   65                  | and_not_test_star AND not_test

   66 comp_op_expr_star: %empty
   67                  | comp_op_expr_star comp_op expr

   68 or_xor_expr_star: %empty
   69                 | or_xor_expr_star VBAR xor_expr

   70 xor_and_expr_star: %empty
   71                  | xor_and_expr_star CIRCUMFLEX and_expr

   72 and_shift_expr_star: %empty
   73                    | and_shift_expr_star AMPER shift_expr

   74 shift_arith_expr_star: %empty
   75                      | shift_arith_expr_star LEFTSHIFT arith_expr
   76                      | shift_arith_expr_star RIGHTSHIFT arith_expr

   77 op_term_star: %empty
   78             | op_term_star PLUS term
   79             | op_term_star MINUS term

   80 op_factor_star: %empty
   81               | op_factor_star STAR factor
   82               | op_factor_star AT factor
   83               | op_factor_star SLASH factor
   84               | op_factor_star PERCENT factor
   85               | op_factor_star DOUBLESLASH factor

   86 opt_await: %empty
   87          | AWAIT

   88 trailer_star: %empty
   89             | trailer_star trailer

   90 string_plus: STRING
   91            | string_plus STRING

   92 comma_namedexpr_test_star_expr_star: %empty
   93                                    | comma_namedexpr_test_star_expr_star COMMA namedexpr_test
   94                                    | comma_namedexpr_test_star_expr_star COMMA star_expr

   95 comma_subscript_star: %empty
   96                     | comma_subscript_star COMMA subscript

   97 opt_test: %empty
   98         | test

   99 opt_sliceop: %empty
  100            | sliceop

  101 comma_expr_star_expr_star: %empty
  102                          | comma_expr_star_expr_star COMMA expr
  103                          | comma_expr_star_expr_star COMMA star_expr

  104 comma_test_star: %empty
  105                | comma_test_star COMMA test

  106 comma_dict1_star: %empty
  107                 | comma_dict1_star COMMA test COLON test
  108                 | comma_dict1_star COMMA DOUBLESTAR expr

  109 except_suite_plus: except_clause COLON suite
  110                  | except_suite_plus except_clause COLON suite

  111 opt_finally_suite: %empty
  112                  | FINALLY COLON suite

  113 program: file_input

  114 file_input: newline_or_stmt_star ENDMARKER

  115 decorator: AT dotted_name opt_par_arglist NEWLINE

  116 decorators: decorator_plus

  117 decorated: decorators classdef
  118          | decorators funcdef
  119          | decorators async_funcdef

  120 async_funcdef: ASYNC funcdef

  121 funcdef: DEF NAME parameters opt_arrow_test COLON opt_type_comment func_body_suite

  122 parameters: LPAR RPAR
  123           | LPAR typedargslist RPAR

  124 arguments: argument comma_argument_star

  125 argument: tfpdef opt_assign_test

  126 typedargslist: arguments

  127 tfpdef: NAME opt_colon_test

  128 stmt: simple_stmt
  129     | compound_stmt

  130 simple_stmt: small_stmt semi_small_stmt_star opt_semi NEWLINE

  131 small_stmt: expr_stmt
  132           | del_stmt
  133           | pass_stmt
  134           | flow_stmt
  135           | import_stmt
  136           | global_stmt
  137           | nonlocal_stmt
  138           | assert_stmt

  139 expr_stmt: testlist_star_expr annassign
  140          | testlist_star_expr augassign yield_expr
  141          | testlist_star_expr augassign testlist
  142          | testlist_star_expr
  143          | testlist_star_expr assing_yield_or_test_plus opt_type_comment

  144 annassign: COLON test opt_assing_yield_or_test

  145 testlist_star_expr: test comma_test_star_expr_star opt_comma
  146                   | star_expr comma_test_star_expr_star opt_comma

  147 augassign: PLUSEQUAL
  148          | MINUSEQUAL
  149          | STAREQUAL
  150          | ATEQUAL
  151          | SLASHEQUAL
  152          | PERCENTEQUAL
  153          | AMPEREQUAL
  154          | VBAREQUAL
  155          | CIRCUMFLEXEQUAL
  156          | LEFTSHIFTEQUAL
  157          | RIGHTSHIFTEQUAL
  158          | DOUBLESTAREQUAL
  159          | DOUBLESLASHEQUAL

  160 del_stmt: DEL exprlist

  161 pass_stmt: PASS

  162 flow_stmt: break_stmt
  163          | continue_stmt
  164          | return_stmt
  165          | raise_stmt
  166          | yield_stmt

  167 break_stmt: BREAK

  168 continue_stmt: CONTINUE

  169 return_stmt: RETURN opt_testlist_star_expr

  170 yield_stmt: yield_expr

  171 raise_stmt: RAISE
  172           | RAISE test
  173           | RAISE test FROM test

  174 import_stmt: import_name
  175            | import_from

  176 import_name: IMPORT dotted_as_names

  177 import_from: FROM from_part IMPORT import_part

  178 from_part: DOT
  179          | ELLIPSIS
  180          | dotted_name

  181 import_part: STAR
  182            | LPAR import_as_names RPAR
  183            | import_as_names

  184 import_as_name: NAME opt_as_name

  185 dotted_as_name: dotted_name opt_as_name

  186 import_as_names: import_as_name comma_import_as_name_star opt_comma

  187 dotted_as_names: dotted_as_name comma_dotted_as_name_star

  188 dotted_name: NAME dot_name_star

  189 global_stmt: GLOBAL NAME comma_name_star

  190 nonlocal_stmt: NONLOCAL NAME comma_name_star

  191 assert_stmt: ASSERT test opt_comma_test

  192 compound_stmt: if_stmt
  193              | while_stmt
  194              | for_stmt
  195              | try_stmt
  196              | with_stmt
  197              | funcdef
  198              | classdef
  199              | decorated
  200              | async_stmt

  201 async_stmt: ASYNC funcdef
  202           | ASYNC with_stmt
  203           | ASYNC for_stmt

  204 if_stmt: IF namedexpr_test COLON suite elif_test_suite_star opt_else_suite

  205 while_stmt: WHILE namedexpr_test COLON suite opt_else_suite

  206 for_stmt: FOR exprlist IN testlist COLON opt_type_comment suite opt_else_suite

  207 try_stmt: TRY COLON suite except_suite_plus opt_else_suite opt_finally_suite
  208         | TRY COLON suite FINALLY COLON suite

  209 with_stmt: WITH with_item comma_with_item_star COLON opt_type_comment suite

  210 with_item: test opt_as_expr

  211 except_clause: EXCEPT opt_test_as_name

  212 suite: simple_stmt
  213      | NEWLINE INDENT stmt_plus DEDENT

  214 namedexpr_test: test opt_colonass_test

  215 test: or_test
  216     | or_test IF or_test ELSE test
  217     | lambdef

  218 test_nocond: or_test
  219            | lambdef_nocond

  220 lambdef: LAMBDA COLON test

  221 lambdef_nocond: LAMBDA COLON test_nocond

  222 or_test: and_test or_and_test_star

  223 and_test: not_test and_not_test_star

  224 not_test: NOT not_test
  225         | comparison

  226 comparison: expr comp_op_expr_star

  227 comp_op: LESS
  228        | GREATER
  229        | EQEQUAL
  230        | GREATEREQUAL
  231        | LESSEQUAL
  232        | NOTEQUAL
  233        | IN
  234        | NOT IN
  235        | IS
  236        | IS NOT

  237 star_expr: STAR expr

  238 expr: xor_expr or_xor_expr_star

  239 xor_expr: and_expr xor_and_expr_star

  240 and_expr: shift_expr and_shift_expr_star

  241 shift_expr: arith_expr shift_arith_expr_star

  242 arith_expr: term op_term_star

  243 term: factor op_factor_star

  244 factor: PLUS factor
  245       | MINUS factor
  246       | TILDE factor
  247       | power

  248 power: atom_expr
  249      | atom_expr DOUBLESTAR factor

  250 atom_expr: opt_await atom trailer_star

  251 atom: LPAR RPAR
  252     | LPAR yield_expr RPAR
  253     | LPAR testlist_comp RPAR
  254     | LSQB RSQB
  255     | LSQB testlist_comp RSQB
  256     | LBRACE RBRACE
  257     | LBRACE dictorsetmaker RBRACE
  258     | NAME
  259     | NUMBER
  260     | string_plus
  261     | ELLIPSIS
  262     | NONE
  263     | TRUE
  264     | FALSE

  265 testlist_comp: namedexpr_test comp_for
  266              | namedexpr_test comma_namedexpr_test_star_expr_star opt_comma
  267              | star_expr comp_for
  268              | star_expr comma_namedexpr_test_star_expr_star opt_comma

  269 trailer: LPAR RPAR
  270        | LPAR arglist RPAR
  271        | LSQB subscriptlist RSQB
  272        | DOT NAME

  273 subscriptlist: subscript comma_subscript_star opt_comma

  274 subscript: test
  275          | opt_test COLON opt_test opt_sliceop

  276 sliceop: COLON opt_test

  277 exprlist: expr comma_expr_star_expr_star opt_comma

  278 testlist: test comma_test_star opt_comma

  279 dictorsetmaker: dictorsetmaker1
  280               | dictorsetmaker2

  281 dictorsetmaker1: test COLON test comp_for
  282                | test COLON test comma_dict1_star opt_comma
  283                | DOUBLESTAR expr comp_for
  284                | DOUBLESTAR expr comma_dict1_star opt_comma

  285 dictorsetmaker2: test comp_for
  286                | test comma_test_star_expr_star opt_comma
  287                | star_expr comp_for
  288                | star_expr comma_test_star_expr_star opt_comma

  289 classdef: CLASS NAME opt_par_arglist COLON suite

  290 arglist: argument1 comma_argument_star opt_comma

  291 argument1: test
  292          | test comp_for
  293          | test COLONENQUAL test
  294          | test EQUAL test
  295          | DOUBLESTAR test
  296          | STAR test

  297 comp_iter: comp_for
  298          | comp_if

  299 sync_comp_for: FOR exprlist IN or_test
  300              | FOR exprlist IN or_test comp_iter

  301 comp_for: sync_comp_for
  302         | ASYNC sync_comp_for

  303 comp_if: IF test_nocond
  304        | IF test_nocond comp_iter

  305 yield_expr: YIELD
  306           | YIELD yield_arg

  307 yield_arg: FROM test
  308          | testlist_star_expr

  309 func_body_suite: simple_stmt
  310                | NEWLINE INDENT stmt_plus DEDENT
  311                | NEWLINE TYPE_COMMENT NEWLINE INDENT stmt_plus DEDENT


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    AND (258) 65
    AMPER (259) 73
    AMPEREQUAL (260) 153
    ARROW (261) 10
    AS (262) 38 55
    ASSERT (263) 191
    EQUAL (264) 16 25 26 27 28 30 31 294
    ASYNC (265) 120 201 202 203 302
    AT (266) 82 115
    ATEQUAL (267) 150
    AWAIT (268) 87
    BREAK (269) 167
    CLASS (270) 289
    COLON (271) 20 50 51 107 109 110 112 121 144 204 205 206 207 208 209 220 221 275 276 281 282 289
    COLONENQUAL (272) 61 293
    COMMA (273) 14 18 33 34 40 42 46 48 53 93 94 96 102 103 105 107 108
    CONTINUE (274) 168
    DEDENT (275) 213 310 311
    DEF (276) 121
    DEL (277) 160
    DOT (278) 44 178 272
    DOUBLESLASH (279) 85
    DOUBLESLASHEQUAL (280) 159
    DOUBLESTAR (281) 108 249 283 284 295
    DOUBLESTAREQUAL (282) 158
    EQEQUAL (283) 229
    ELIF (284) 50
    ELLIPSIS (285) 179 261
    ELSE (286) 51 216
    ENDMARKER (287) 114
    EXCEPT (288) 211
    FALSE (289) 264
    FOR (290) 206 299 300
    FINALLY (291) 112 208
    FROM (292) 173 177 307
    GREATEREQUAL (293) 230
    GLOBAL (294) 189
    GREATER (295) 228
    IF (296) 204 216 303 304
    IMPORT (297) 176 177
    IN (298) 206 233 234 299 300
    INDENT (299) 213 310 311
    IS (300) 235 236
    LAMBDA (301) 220 221
    LSQB (302) 254 255 271
    LBRACE (303) 256 257
    LESSEQUAL (304) 231
    LPAR (305) 5 6 122 123 182 251 252 253 269 270
    LEFTSHIFT (306) 75
    LEFTSHIFTEQUAL (307) 156
    LESS (308) 227
    MINUS (309) 79 245
    MINUSEQUAL (310) 148
    NAME (311) 38 44 46 121 127 184 188 189 190 258 272 289
    NOTEQUAL (312) 232
    NEWLINE (313) 2 115 130 213 310 311
    NONE (314) 262
    NONLOCAL (315) 190
    NOT (316) 224 234 236
    NUMBER (317) 259
    OR (318) 63
    VBAR (319) 69
    VBAREQUAL (320) 154
    PASS (321) 161
    PERCENT (322) 84
    PERCENTEQUAL (323) 152
    PLUS (324) 78 244
    PLUSEQUAL (325) 147
    RAISE (326) 171 172 173
    RSQB (327) 254 255 271
    RBRACE (328) 256 257
    RETURN (329) 169
    RPAR (330) 5 6 122 123 182 251 252 253 269 270
    RIGHTSHIFT (331) 76
    RIGHTSHIFTEQUAL (332) 157
    SEMICOLON (333) 22 24
    SLASH (334) 83
    SLASHEQUAL (335) 151
    STAR (336) 81 181 237 296
    STAREQUAL (337) 149
    STRING (338) 90 91
    TILDE (339) 246
    TRUE (340) 263
    TRY (341) 207 208
    TYPE_COMMENT (342) 12 311
    WITH (343) 209
    WHILE (344) 205
    CIRCUMFLEX (345) 71
    CIRCUMFLEXEQUAL (346) 155
    YIELD (347) 305 306


Nonterminals, with rules where they appear

    $accept (93)
        on left: 0
    newline_or_stmt_star (94)
        on left: 1 2 3
        on right: 2 3 114
    opt_par_arglist (95)
        on left: 4 5 6
        on right: 115 289
    decorator_plus (96)
        on left: 7 8
        on right: 8 116
    opt_arrow_test (97)
        on left: 9 10
        on right: 121
    opt_type_comment (98)
        on left: 11 12
        on right: 14 121 143 206 209
    comma_argument_star (99)
        on left: 13 14
        on right: 14 124 290
    opt_assign_test (100)
        on left: 15 16
        on right: 125
    opt_comma (101)
        on left: 17 18
        on right: 145 146 186 266 268 273 277 278 282 284 286 288 290
    opt_colon_test (102)
        on left: 19 20
        on right: 127
    semi_small_stmt_star (103)
        on left: 21 22
        on right: 22 130
    opt_semi (104)
        on left: 23 24
        on right: 130
    assing_yield_or_test_plus (105)
        on left: 25 26 27 28
        on right: 27 28 143
    opt_assing_yield_or_test (106)
        on left: 29 30 31
        on right: 144
    comma_test_star_expr_star (107)
        on left: 32 33 34
        on right: 33 34 145 146 286 288
    opt_testlist_star_expr (108)
        on left: 35 36
        on right: 169
    opt_as_name (109)
        on left: 37 38
        on right: 57 184 185
    comma_import_as_name_star (110)
        on left: 39 40
        on right: 40 186
    comma_dotted_as_name_star (111)
        on left: 41 42
        on right: 42 187
    dot_name_star (112)
        on left: 43 44
        on right: 44 188
    comma_name_star (113)
        on left: 45 46
        on right: 46 189 190
    opt_comma_test (114)
        on left: 47 48
        on right: 191
    elif_test_suite_star (115)
        on left: 49 50
        on right: 50 204
    opt_else_suite (116)
        on left: 51
        on right: 204 205 206 207
    comma_with_item_star (117)
        on left: 52 53
        on right: 53 209
    opt_as_expr (118)
        on left: 54 55
        on right: 210
    opt_test_as_name (119)
        on left: 56 57
        on right: 211
    stmt_plus (120)
        on left: 58 59
        on right: 59 213 310 311
    opt_colonass_test (121)
        on left: 60 61
        on right: 214
    or_and_test_star (122)
        on left: 62 63
        on right: 63 222
    and_not_test_star (123)
        on left: 64 65
        on right: 65 223
    comp_op_expr_star (124)
        on left: 66 67
        on right: 67 226
    or_xor_expr_star (125)
        on left: 68 69
        on right: 69 238
    xor_and_expr_star (126)
        on left: 70 71
        on right: 71 239
    and_shift_expr_star (127)
        on left: 72 73
        on right: 73 240
    shift_arith_expr_star (128)
        on left: 74 75 76
        on right: 75 76 241
    op_term_star (129)
        on left: 77 78 79
        on right: 78 79 242
    op_factor_star (130)
        on left: 80 81 82 83 84 85
        on right: 81 82 83 84 85 243
    opt_await (131)
        on left: 86 87
        on right: 250
    trailer_star (132)
        on left: 88 89
        on right: 89 250
    string_plus (133)
        on left: 90 91
        on right: 91 260
    comma_namedexpr_test_star_expr_star (134)
        on left: 92 93 94
        on right: 93 94 266 268
    comma_subscript_star (135)
        on left: 95 96
        on right: 96 273
    opt_test (136)
        on left: 97 98
        on right: 275 276
    opt_sliceop (137)
        on left: 99 100
        on right: 275
    comma_expr_star_expr_star (138)
        on left: 101 102 103
        on right: 102 103 277
    comma_test_star (139)
        on left: 104 105
        on right: 105 278
    comma_dict1_star (140)
        on left: 106 107 108
        on right: 107 108 282 284
    except_suite_plus (141)
        on left: 109 110
        on right: 110 207
    opt_finally_suite (142)
        on left: 111 112
        on right: 207
    program (143)
        on left: 113
        on right: 0
    file_input (144)
        on left: 114
        on right: 113
    decorator (145)
        on left: 115
        on right: 7 8
    decorators (146)
        on left: 116
        on right: 117 118 119
    decorated (147)
        on left: 117 118 119
        on right: 199
    async_funcdef (148)
        on left: 120
        on right: 119
    funcdef (149)
        on left: 121
        on right: 118 120 197 201
    parameters (150)
        on left: 122 123
        on right: 121
    arguments (151)
        on left: 124
        on right: 126
    argument (152)
        on left: 125
        on right: 14 124
    typedargslist (153)
        on left: 126
        on right: 123
    tfpdef (154)
        on left: 127
        on right: 125
    stmt (155)
        on left: 128 129
        on right: 3 58 59
    simple_stmt (156)
        on left: 130
        on right: 128 212 309
    small_stmt (157)
        on left: 131 132 133 134 135 136 137 138
        on right: 22 130
    expr_stmt (158)
        on left: 139 140 141 142 143
        on right: 131
    annassign (159)
        on left: 144
        on right: 139
    testlist_star_expr (160)
        on left: 145 146
        on right: 26 28 31 36 139 140 141 142 143 308
    augassign (161)
        on left: 147 148 149 150 151 152 153 154 155 156 157 158 159
        on right: 140 141
    del_stmt (162)
        on left: 160
        on right: 132
    pass_stmt (163)
        on left: 161
        on right: 133
    flow_stmt (164)
        on left: 162 163 164 165 166
        on right: 134
    break_stmt (165)
        on left: 167
        on right: 162
    continue_stmt (166)
        on left: 168
        on right: 163
    return_stmt (167)
        on left: 169
        on right: 164
    yield_stmt (168)
        on left: 170
        on right: 166
    raise_stmt (169)
        on left: 171 172 173
        on right: 165
    import_stmt (170)
        on left: 174 175
        on right: 135
    import_name (171)
        on left: 176
        on right: 174
    import_from (172)
        on left: 177
        on right: 175
    from_part (173)
        on left: 178 179 180
        on right: 177
    import_part (174)
        on left: 181 182 183
        on right: 177
    import_as_name (175)
        on left: 184
        on right: 40 186
    dotted_as_name (176)
        on left: 185
        on right: 42 187
    import_as_names (177)
        on left: 186
        on right: 182 183
    dotted_as_names (178)
        on left: 187
        on right: 176
    dotted_name (179)
        on left: 188
        on right: 115 180 185
    global_stmt (180)
        on left: 189
        on right: 136
    nonlocal_stmt (181)
        on left: 190
        on right: 137
    assert_stmt (182)
        on left: 191
        on right: 138
    compound_stmt (183)
        on left: 192 193 194 195 196 197 198 199 200
        on right: 129
    async_stmt (184)
        on left: 201 202 203
        on right: 200
    if_stmt (185)
        on left: 204
        on right: 192
    while_stmt (186)
        on left: 205
        on right: 193
    for_stmt (187)
        on left: 206
        on right: 194 203
    try_stmt (188)
        on left: 207 208
        on right: 195
    with_stmt (189)
        on left: 209
        on right: 196 202
    with_item (190)
        on left: 210
        on right: 53 209
    except_clause (191)
        on left: 211
        on right: 109 110
    suite (192)
        on left: 212 213
        on right: 50 51 109 110 112 204 205 206 207 208 209 289
    namedexpr_test (193)
        on left: 214
        on right: 50 93 204 205 265 266
    test (194)
        on left: 215 216 217
        on right: 10 16 20 33 48 57 61 98 105 107 144 145 172 173 191 210 214 216 220 274 278 281 282 285 286 291 292 293 294 295 296 307
    test_nocond (195)
        on left: 218 219
        on right: 221 303 304
    lambdef (196)
        on left: 220
        on right: 217
    lambdef_nocond (197)
        on left: 221
        on right: 219
    or_test (198)
        on left: 222
        on right: 215 216 218 299 300
    and_test (199)
        on left: 223
        on right: 63 222
    not_test (200)
        on left: 224 225
        on right: 65 223 224
    comparison (201)
        on left: 226
        on right: 225
    comp_op (202)
        on left: 227 228 229 230 231 232 233 234 235 236
        on right: 67
    star_expr (203)
        on left: 237
        on right: 34 94 103 146 267 268 287 288
    expr (204)
        on left: 238
        on right: 55 67 102 108 226 237 277 283 284
    xor_expr (205)
        on left: 239
        on right: 69 238
    and_expr (206)
        on left: 240
        on right: 71 239
    shift_expr (207)
        on left: 241
        on right: 73 240
    arith_expr (208)
        on left: 242
        on right: 75 76 241
    term (209)
        on left: 243
        on right: 78 79 242
    factor (210)
        on left: 244 245 246 247
        on right: 81 82 83 84 85 243 244 245 246 249
    power (211)
        on left: 248 249
        on right: 247
    atom_expr (212)
        on left: 250
        on right: 248 249
    atom (213)
        on left: 251 252 253 254 255 256 257 258 259 260 261 262 263 264
        on right: 250
    testlist_comp (214)
        on left: 265 266 267 268
        on right: 253 255
    trailer (215)
        on left: 269 270 271 272
        on right: 89
    subscriptlist (216)
        on left: 273
        on right: 271
    subscript (217)
        on left: 274 275
        on right: 96 273
    sliceop (218)
        on left: 276
        on right: 100
    exprlist (219)
        on left: 277
        on right: 160 206 299 300
    testlist (220)
        on left: 278
        on right: 141 206
    dictorsetmaker (221)
        on left: 279 280
        on right: 257
    dictorsetmaker1 (222)
        on left: 281 282 283 284
        on right: 279
    dictorsetmaker2 (223)
        on left: 285 286 287 288
        on right: 280
    classdef (224)
        on left: 289
        on right: 117 198
    arglist (225)
        on left: 290
        on right: 6 270
    argument1 (226)
        on left: 291 292 293 294 295 296
        on right: 290
    comp_iter (227)
        on left: 297 298
        on right: 300 304
    sync_comp_for (228)
        on left: 299 300
        on right: 301 302
    comp_for (229)
        on left: 301 302
        on right: 265 267 281 283 285 287 292 297
    comp_if (230)
        on left: 303 304
        on right: 298
    yield_expr (231)
        on left: 305 306
        on right: 25 27 30 140 170 252
    yield_arg (232)
        on left: 307 308
        on right: 306
    func_body_suite (233)
        on left: 309 310 311
        on right: 121


State 0

    0 $accept: • program $end
    1 newline_or_stmt_star: • %empty
    2                     | • newline_or_stmt_star NEWLINE
    3                     | • newline_or_stmt_star stmt
  113 program: • file_input
  114 file_input: • newline_or_stmt_star ENDMARKER

    $default  reduce using rule 1 (newline_or_stmt_star)

    newline_or_stmt_star  go to state 1
    program               go to state 2
    file_input            go to state 3


State 1

    2 newline_or_stmt_star: newline_or_stmt_star • NEWLINE
    3                     | newline_or_stmt_star • stmt
    7 decorator_plus: • decorator
    8               | • decorator_plus decorator
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  114 file_input: newline_or_stmt_star • ENDMARKER
  115 decorator: • AT dotted_name opt_par_arglist NEWLINE
  116 decorators: • decorator_plus
  117 decorated: • decorators classdef
  118          | • decorators funcdef
  119          | • decorators async_funcdef
  121 funcdef: • DEF NAME parameters opt_arrow_test COLON opt_type_comment func_body_suite
  128 stmt: • simple_stmt
  129     | • compound_stmt
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  192 compound_stmt: • if_stmt
  193              | • while_stmt
  194              | • for_stmt
  195              | • try_stmt
  196              | • with_stmt
  197              | • funcdef
  198              | • classdef
  199              | • decorated
  200              | • async_stmt
  201 async_stmt: • ASYNC funcdef
  202           | • ASYNC with_stmt
  203           | • ASYNC for_stmt
  204 if_stmt: • IF namedexpr_test COLON suite elif_test_suite_star opt_else_suite
  205 while_stmt: • WHILE namedexpr_test COLON suite opt_else_suite
  206 for_stmt: • FOR exprlist IN testlist COLON opt_type_comment suite opt_else_suite
  207 try_stmt: • TRY COLON suite except_suite_plus opt_else_suite opt_finally_suite
  208         | • TRY COLON suite FINALLY COLON suite
  209 with_stmt: • WITH with_item comma_with_item_star COLON opt_type_comment suite
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  289 classdef: • CLASS NAME opt_par_arglist COLON suite
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    ASSERT     shift, and go to state 4
    ASYNC      shift, and go to state 5
    AT         shift, and go to state 6
    AWAIT      shift, and go to state 7
    BREAK      shift, and go to state 8
    CLASS      shift, and go to state 9
    CONTINUE   shift, and go to state 10
    DEF        shift, and go to state 11
    DEL        shift, and go to state 12
    ENDMARKER  shift, and go to state 13
    FOR        shift, and go to state 14
    FROM       shift, and go to state 15
    GLOBAL     shift, and go to state 16
    IF         shift, and go to state 17
    IMPORT     shift, and go to state 18
    LAMBDA     shift, and go to state 19
    MINUS      shift, and go to state 20
    NEWLINE    shift, and go to state 21
    NONLOCAL   shift, and go to state 22
    NOT        shift, and go to state 23
    PASS       shift, and go to state 24
    PLUS       shift, and go to state 25
    RAISE      shift, and go to state 26
    RETURN     shift, and go to state 27
    STAR       shift, and go to state 28
    TILDE      shift, and go to state 29
    TRY        shift, and go to state 30
    WITH       shift, and go to state 31
    WHILE      shift, and go to state 32
    YIELD      shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    decorator_plus      go to state 34
    opt_await           go to state 35
    decorator           go to state 36
    decorators          go to state 37
    decorated           go to state 38
    funcdef             go to state 39
    stmt                go to state 40
    simple_stmt         go to state 41
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    compound_stmt       go to state 59
    async_stmt          go to state 60
    if_stmt             go to state 61
    while_stmt          go to state 62
    for_stmt            go to state 63
    try_stmt            go to state 64
    with_stmt           go to state 65
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    classdef            go to state 82
    yield_expr          go to state 83


State 2

    0 $accept: program • $end

    $end  shift, and go to state 84


State 3

  113 program: file_input •

    $default  reduce using rule 113 (program)


State 4

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  191 assert_stmt: ASSERT • test opt_comma_test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 85
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 5

  121 funcdef: • DEF NAME parameters opt_arrow_test COLON opt_type_comment func_body_suite
  201 async_stmt: ASYNC • funcdef
  202           | ASYNC • with_stmt
  203           | ASYNC • for_stmt
  206 for_stmt: • FOR exprlist IN testlist COLON opt_type_comment suite opt_else_suite
  209 with_stmt: • WITH with_item comma_with_item_star COLON opt_type_comment suite

    DEF   shift, and go to state 11
    FOR   shift, and go to state 14
    WITH  shift, and go to state 31

    funcdef    go to state 86
    for_stmt   go to state 87
    with_stmt  go to state 88


State 6

  115 decorator: AT • dotted_name opt_par_arglist NEWLINE
  188 dotted_name: • NAME dot_name_star

    NAME  shift, and go to state 89

    dotted_name  go to state 90


State 7

   87 opt_await: AWAIT •

    $default  reduce using rule 87 (opt_await)


State 8

  167 break_stmt: BREAK •

    $default  reduce using rule 167 (break_stmt)


State 9

  289 classdef: CLASS • NAME opt_par_arglist COLON suite

    NAME  shift, and go to state 91


State 10

  168 continue_stmt: CONTINUE •

    $default  reduce using rule 168 (continue_stmt)


State 11

  121 funcdef: DEF • NAME parameters opt_arrow_test COLON opt_type_comment func_body_suite

    NAME  shift, and go to state 92


State 12

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  160 del_stmt: DEL • exprlist
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  277 exprlist: • expr comma_expr_star_expr_star opt_comma

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    expr        go to state 93
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81
    exprlist    go to state 94


State 13

  114 file_input: newline_or_stmt_star ENDMARKER •

    $default  reduce using rule 114 (file_input)


State 14

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  206 for_stmt: FOR • exprlist IN testlist COLON opt_type_comment suite opt_else_suite
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  277 exprlist: • expr comma_expr_star_expr_star opt_comma

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    expr        go to state 93
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81
    exprlist    go to state 95


State 15

  177 import_from: FROM • from_part IMPORT import_part
  178 from_part: • DOT
  179          | • ELLIPSIS
  180          | • dotted_name
  188 dotted_name: • NAME dot_name_star

    DOT       shift, and go to state 96
    ELLIPSIS  shift, and go to state 97
    NAME      shift, and go to state 89

    from_part    go to state 98
    dotted_name  go to state 99


State 16

  189 global_stmt: GLOBAL • NAME comma_name_star

    NAME  shift, and go to state 100


State 17

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  204 if_stmt: IF • namedexpr_test COLON suite elif_test_suite_star opt_else_suite
  214 namedexpr_test: • test opt_colonass_test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await       go to state 35
    namedexpr_test  go to state 101
    test            go to state 102
    lambdef         go to state 67
    or_test         go to state 68
    and_test        go to state 69
    not_test        go to state 70
    comparison      go to state 71
    expr            go to state 73
    xor_expr        go to state 74
    and_expr        go to state 75
    shift_expr      go to state 76
    arith_expr      go to state 77
    term            go to state 78
    factor          go to state 79
    power           go to state 80
    atom_expr       go to state 81


State 18

  176 import_name: IMPORT • dotted_as_names
  185 dotted_as_name: • dotted_name opt_as_name
  187 dotted_as_names: • dotted_as_name comma_dotted_as_name_star
  188 dotted_name: • NAME dot_name_star

    NAME  shift, and go to state 89

    dotted_as_name   go to state 103
    dotted_as_names  go to state 104
    dotted_name      go to state 105


State 19

  220 lambdef: LAMBDA • COLON test

    COLON  shift, and go to state 106


State 20

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  244 factor: • PLUS factor
  245       | • MINUS factor
  245       | MINUS • factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await  go to state 35
    factor     go to state 107
    power      go to state 80
    atom_expr  go to state 81


State 21

    2 newline_or_stmt_star: newline_or_stmt_star NEWLINE •

    $default  reduce using rule 2 (newline_or_stmt_star)


State 22

  190 nonlocal_stmt: NONLOCAL • NAME comma_name_star

    NAME  shift, and go to state 108


State 23

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  224 not_test: • NOT not_test
  224         | NOT • not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    NOT    shift, and go to state 23
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    not_test    go to state 109
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 24

  161 pass_stmt: PASS •

    $default  reduce using rule 161 (pass_stmt)


State 25

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  244 factor: • PLUS factor
  244       | PLUS • factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await  go to state 35
    factor     go to state 110
    power      go to state 80
    atom_expr  go to state 81


State 26

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  171 raise_stmt: RAISE •  [NEWLINE, SEMICOLON]
  172           | RAISE • test
  173           | RAISE • test FROM test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    NEWLINE    reduce using rule 171 (raise_stmt)
    SEMICOLON  reduce using rule 171 (raise_stmt)
    $default   reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 111
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 27

   35 opt_testlist_star_expr: • %empty  [NEWLINE, SEMICOLON]
   36                       | • testlist_star_expr
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  169 return_stmt: RETURN • opt_testlist_star_expr
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    STAR    shift, and go to state 28
    TILDE   shift, and go to state 29

    NEWLINE    reduce using rule 35 (opt_testlist_star_expr)
    SEMICOLON  reduce using rule 35 (opt_testlist_star_expr)
    $default   reduce using rule 86 (opt_await)

    opt_testlist_star_expr  go to state 112
    opt_await               go to state 35
    testlist_star_expr      go to state 113
    test                    go to state 66
    lambdef                 go to state 67
    or_test                 go to state 68
    and_test                go to state 69
    not_test                go to state 70
    comparison              go to state 71
    star_expr               go to state 72
    expr                    go to state 73
    xor_expr                go to state 74
    and_expr                go to state 75
    shift_expr              go to state 76
    arith_expr              go to state 77
    term                    go to state 78
    factor                  go to state 79
    power                   go to state 80
    atom_expr               go to state 81


State 28

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  237 star_expr: STAR • expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    expr        go to state 114
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 29

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  246       | TILDE • factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await  go to state 35
    factor     go to state 115
    power      go to state 80
    atom_expr  go to state 81


State 30

  207 try_stmt: TRY • COLON suite except_suite_plus opt_else_suite opt_finally_suite
  208         | TRY • COLON suite FINALLY COLON suite

    COLON  shift, and go to state 116


State 31

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  209 with_stmt: WITH • with_item comma_with_item_star COLON opt_type_comment suite
  210 with_item: • test opt_as_expr
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    with_item   go to state 117
    test        go to state 118
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 32

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  205 while_stmt: WHILE • namedexpr_test COLON suite opt_else_suite
  214 namedexpr_test: • test opt_colonass_test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await       go to state 35
    namedexpr_test  go to state 119
    test            go to state 102
    lambdef         go to state 67
    or_test         go to state 68
    and_test        go to state 69
    not_test        go to state 70
    comparison      go to state 71
    expr            go to state 73
    xor_expr        go to state 74
    and_expr        go to state 75
    shift_expr      go to state 76
    arith_expr      go to state 77
    term            go to state 78
    factor          go to state 79
    power           go to state 80
    atom_expr       go to state 81


State 33

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  305 yield_expr: YIELD •  [EQUAL, NEWLINE, RPAR, SEMICOLON, TYPE_COMMENT]
  306           | YIELD • yield_arg
  307 yield_arg: • FROM test
  308          | • testlist_star_expr

    AWAIT   shift, and go to state 7
    FROM    shift, and go to state 120
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    STAR    shift, and go to state 28
    TILDE   shift, and go to state 29

    EQUAL         reduce using rule 305 (yield_expr)
    NEWLINE       reduce using rule 305 (yield_expr)
    RPAR          reduce using rule 305 (yield_expr)
    SEMICOLON     reduce using rule 305 (yield_expr)
    TYPE_COMMENT  reduce using rule 305 (yield_expr)
    $default      reduce using rule 86 (opt_await)

    opt_await           go to state 35
    testlist_star_expr  go to state 121
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_arg           go to state 122


State 34

    8 decorator_plus: decorator_plus • decorator
  115 decorator: • AT dotted_name opt_par_arglist NEWLINE
  116 decorators: decorator_plus •  [ASYNC, CLASS, DEF]

    AT  shift, and go to state 6

    $default  reduce using rule 116 (decorators)

    decorator  go to state 123


State 35

   90 string_plus: • STRING
   91            | • string_plus STRING
  250 atom_expr: opt_await • atom trailer_star
  251 atom: • LPAR RPAR
  252     | • LPAR yield_expr RPAR
  253     | • LPAR testlist_comp RPAR
  254     | • LSQB RSQB
  255     | • LSQB testlist_comp RSQB
  256     | • LBRACE RBRACE
  257     | • LBRACE dictorsetmaker RBRACE
  258     | • NAME
  259     | • NUMBER
  260     | • string_plus
  261     | • ELLIPSIS
  262     | • NONE
  263     | • TRUE
  264     | • FALSE

    ELLIPSIS  shift, and go to state 124
    FALSE     shift, and go to state 125
    LSQB      shift, and go to state 126
    LBRACE    shift, and go to state 127
    LPAR      shift, and go to state 128
    NAME      shift, and go to state 129
    NONE      shift, and go to state 130
    NUMBER    shift, and go to state 131
    STRING    shift, and go to state 132
    TRUE      shift, and go to state 133

    string_plus  go to state 134
    atom         go to state 135


State 36

    7 decorator_plus: decorator •

    $default  reduce using rule 7 (decorator_plus)


State 37

  117 decorated: decorators • classdef
  118          | decorators • funcdef
  119          | decorators • async_funcdef
  120 async_funcdef: • ASYNC funcdef
  121 funcdef: • DEF NAME parameters opt_arrow_test COLON opt_type_comment func_body_suite
  289 classdef: • CLASS NAME opt_par_arglist COLON suite

    ASYNC  shift, and go to state 136
    CLASS  shift, and go to state 9
    DEF    shift, and go to state 11

    async_funcdef  go to state 137
    funcdef        go to state 138
    classdef       go to state 139


State 38

  199 compound_stmt: decorated •

    $default  reduce using rule 199 (compound_stmt)


State 39

  197 compound_stmt: funcdef •

    $default  reduce using rule 197 (compound_stmt)


State 40

    3 newline_or_stmt_star: newline_or_stmt_star stmt •

    $default  reduce using rule 3 (newline_or_stmt_star)


State 41

  128 stmt: simple_stmt •

    $default  reduce using rule 128 (stmt)


State 42

   21 semi_small_stmt_star: • %empty
   22                     | • semi_small_stmt_star SEMICOLON small_stmt
  130 simple_stmt: small_stmt • semi_small_stmt_star opt_semi NEWLINE

    $default  reduce using rule 21 (semi_small_stmt_star)

    semi_small_stmt_star  go to state 140


State 43

  131 small_stmt: expr_stmt •

    $default  reduce using rule 131 (small_stmt)


State 44

   25 assing_yield_or_test_plus: • EQUAL yield_expr
   26                          | • EQUAL testlist_star_expr
   27                          | • assing_yield_or_test_plus EQUAL yield_expr
   28                          | • assing_yield_or_test_plus EQUAL testlist_star_expr
  139 expr_stmt: testlist_star_expr • annassign
  140          | testlist_star_expr • augassign yield_expr
  141          | testlist_star_expr • augassign testlist
  142          | testlist_star_expr •  [NEWLINE, SEMICOLON]
  143          | testlist_star_expr • assing_yield_or_test_plus opt_type_comment
  144 annassign: • COLON test opt_assing_yield_or_test
  147 augassign: • PLUSEQUAL
  148          | • MINUSEQUAL
  149          | • STAREQUAL
  150          | • ATEQUAL
  151          | • SLASHEQUAL
  152          | • PERCENTEQUAL
  153          | • AMPEREQUAL
  154          | • VBAREQUAL
  155          | • CIRCUMFLEXEQUAL
  156          | • LEFTSHIFTEQUAL
  157          | • RIGHTSHIFTEQUAL
  158          | • DOUBLESTAREQUAL
  159          | • DOUBLESLASHEQUAL

    AMPEREQUAL        shift, and go to state 141
    EQUAL             shift, and go to state 142
    ATEQUAL           shift, and go to state 143
    COLON             shift, and go to state 144
    DOUBLESLASHEQUAL  shift, and go to state 145
    DOUBLESTAREQUAL   shift, and go to state 146
    LEFTSHIFTEQUAL    shift, and go to state 147
    MINUSEQUAL        shift, and go to state 148
    VBAREQUAL         shift, and go to state 149
    PERCENTEQUAL      shift, and go to state 150
    PLUSEQUAL         shift, and go to state 151
    RIGHTSHIFTEQUAL   shift, and go to state 152
    SLASHEQUAL        shift, and go to state 153
    STAREQUAL         shift, and go to state 154
    CIRCUMFLEXEQUAL   shift, and go to state 155

    $default  reduce using rule 142 (expr_stmt)

    assing_yield_or_test_plus  go to state 156
    annassign                  go to state 157
    augassign                  go to state 158


State 45

  132 small_stmt: del_stmt •

    $default  reduce using rule 132 (small_stmt)


State 46

  133 small_stmt: pass_stmt •

    $default  reduce using rule 133 (small_stmt)


State 47

  134 small_stmt: flow_stmt •

    $default  reduce using rule 134 (small_stmt)


State 48

  162 flow_stmt: break_stmt •

    $default  reduce using rule 162 (flow_stmt)


State 49

  163 flow_stmt: continue_stmt •

    $default  reduce using rule 163 (flow_stmt)


State 50

  164 flow_stmt: return_stmt •

    $default  reduce using rule 164 (flow_stmt)


State 51

  166 flow_stmt: yield_stmt •

    $default  reduce using rule 166 (flow_stmt)


State 52

  165 flow_stmt: raise_stmt •

    $default  reduce using rule 165 (flow_stmt)


State 53

  135 small_stmt: import_stmt •

    $default  reduce using rule 135 (small_stmt)


State 54

  174 import_stmt: import_name •

    $default  reduce using rule 174 (import_stmt)


State 55

  175 import_stmt: import_from •

    $default  reduce using rule 175 (import_stmt)


State 56

  136 small_stmt: global_stmt •

    $default  reduce using rule 136 (small_stmt)


State 57

  137 small_stmt: nonlocal_stmt •

    $default  reduce using rule 137 (small_stmt)


State 58

  138 small_stmt: assert_stmt •

    $default  reduce using rule 138 (small_stmt)


State 59

  129 stmt: compound_stmt •

    $default  reduce using rule 129 (stmt)


State 60

  200 compound_stmt: async_stmt •

    $default  reduce using rule 200 (compound_stmt)


State 61

  192 compound_stmt: if_stmt •

    $default  reduce using rule 192 (compound_stmt)


State 62

  193 compound_stmt: while_stmt •

    $default  reduce using rule 193 (compound_stmt)


State 63

  194 compound_stmt: for_stmt •

    $default  reduce using rule 194 (compound_stmt)


State 64

  195 compound_stmt: try_stmt •

    $default  reduce using rule 195 (compound_stmt)


State 65

  196 compound_stmt: with_stmt •

    $default  reduce using rule 196 (compound_stmt)


State 66

   32 comma_test_star_expr_star: • %empty
   33                          | • comma_test_star_expr_star COMMA test
   34                          | • comma_test_star_expr_star COMMA star_expr
  145 testlist_star_expr: test • comma_test_star_expr_star opt_comma

    $default  reduce using rule 32 (comma_test_star_expr_star)

    comma_test_star_expr_star  go to state 159


State 67

  217 test: lambdef •

    $default  reduce using rule 217 (test)


State 68

  215 test: or_test •  [AMPEREQUAL, AS, EQUAL, ASYNC, ATEQUAL, COLON, COLONENQUAL, COMMA, DOUBLESLASHEQUAL, DOUBLESTAREQUAL, FOR, FROM, LEFTSHIFTEQUAL, MINUSEQUAL, NEWLINE, VBAREQUAL, PERCENTEQUAL, PLUSEQUAL, RSQB, RBRACE, RPAR, RIGHTSHIFTEQUAL, SEMICOLON, SLASHEQUAL, STAREQUAL, TYPE_COMMENT, CIRCUMFLEXEQUAL]
  216     | or_test • IF or_test ELSE test

    IF  shift, and go to state 160

    $default  reduce using rule 215 (test)


State 69

   62 or_and_test_star: • %empty
   63                 | • or_and_test_star OR and_test
  222 or_test: and_test • or_and_test_star

    $default  reduce using rule 62 (or_and_test_star)

    or_and_test_star  go to state 161


State 70

   64 and_not_test_star: • %empty
   65                  | • and_not_test_star AND not_test
  223 and_test: not_test • and_not_test_star

    $default  reduce using rule 64 (and_not_test_star)

    and_not_test_star  go to state 162


State 71

  225 not_test: comparison •

    $default  reduce using rule 225 (not_test)


State 72

   32 comma_test_star_expr_star: • %empty
   33                          | • comma_test_star_expr_star COMMA test
   34                          | • comma_test_star_expr_star COMMA star_expr
  146 testlist_star_expr: star_expr • comma_test_star_expr_star opt_comma

    $default  reduce using rule 32 (comma_test_star_expr_star)

    comma_test_star_expr_star  go to state 163


State 73

   66 comp_op_expr_star: • %empty
   67                  | • comp_op_expr_star comp_op expr
  226 comparison: expr • comp_op_expr_star

    $default  reduce using rule 66 (comp_op_expr_star)

    comp_op_expr_star  go to state 164


State 74

   68 or_xor_expr_star: • %empty
   69                 | • or_xor_expr_star VBAR xor_expr
  238 expr: xor_expr • or_xor_expr_star

    $default  reduce using rule 68 (or_xor_expr_star)

    or_xor_expr_star  go to state 165


State 75

   70 xor_and_expr_star: • %empty
   71                  | • xor_and_expr_star CIRCUMFLEX and_expr
  239 xor_expr: and_expr • xor_and_expr_star

    $default  reduce using rule 70 (xor_and_expr_star)

    xor_and_expr_star  go to state 166


State 76

   72 and_shift_expr_star: • %empty
   73                    | • and_shift_expr_star AMPER shift_expr
  240 and_expr: shift_expr • and_shift_expr_star

    $default  reduce using rule 72 (and_shift_expr_star)

    and_shift_expr_star  go to state 167


State 77

   74 shift_arith_expr_star: • %empty
   75                      | • shift_arith_expr_star LEFTSHIFT arith_expr
   76                      | • shift_arith_expr_star RIGHTSHIFT arith_expr
  241 shift_expr: arith_expr • shift_arith_expr_star

    $default  reduce using rule 74 (shift_arith_expr_star)

    shift_arith_expr_star  go to state 168


State 78

   77 op_term_star: • %empty
   78             | • op_term_star PLUS term
   79             | • op_term_star MINUS term
  242 arith_expr: term • op_term_star

    $default  reduce using rule 77 (op_term_star)

    op_term_star  go to state 169


State 79

   80 op_factor_star: • %empty
   81               | • op_factor_star STAR factor
   82               | • op_factor_star AT factor
   83               | • op_factor_star SLASH factor
   84               | • op_factor_star PERCENT factor
   85               | • op_factor_star DOUBLESLASH factor
  243 term: factor • op_factor_star

    $default  reduce using rule 80 (op_factor_star)

    op_factor_star  go to state 170


State 80

  247 factor: power •

    $default  reduce using rule 247 (factor)


State 81

  248 power: atom_expr •  [AND, AMPER, AMPEREQUAL, AS, EQUAL, ASYNC, AT, ATEQUAL, COLON, COLONENQUAL, COMMA, DOUBLESLASH, DOUBLESLASHEQUAL, DOUBLESTAREQUAL, EQEQUAL, ELSE, FOR, FROM, GREATEREQUAL, GREATER, IF, IN, IS, LESSEQUAL, LEFTSHIFT, LEFTSHIFTEQUAL, LESS, MINUS, MINUSEQUAL, NOTEQUAL, NEWLINE, NOT, OR, VBAR, VBAREQUAL, PERCENT, PERCENTEQUAL, PLUS, PLUSEQUAL, RSQB, RBRACE, RPAR, RIGHTSHIFT, RIGHTSHIFTEQUAL, SEMICOLON, SLASH, SLASHEQUAL, STAR, STAREQUAL, TYPE_COMMENT, CIRCUMFLEX, CIRCUMFLEXEQUAL]
  249      | atom_expr • DOUBLESTAR factor

    DOUBLESTAR  shift, and go to state 171

    $default  reduce using rule 248 (power)


State 82

  198 compound_stmt: classdef •

    $default  reduce using rule 198 (compound_stmt)


State 83

  170 yield_stmt: yield_expr •

    $default  reduce using rule 170 (yield_stmt)


State 84

    0 $accept: program $end •

    $default  accept


State 85

   47 opt_comma_test: • %empty  [NEWLINE, SEMICOLON]
   48               | • COMMA test
  191 assert_stmt: ASSERT test • opt_comma_test

    COMMA  shift, and go to state 172

    $default  reduce using rule 47 (opt_comma_test)

    opt_comma_test  go to state 173


State 86

  201 async_stmt: ASYNC funcdef •

    $default  reduce using rule 201 (async_stmt)


State 87

  203 async_stmt: ASYNC for_stmt •

    $default  reduce using rule 203 (async_stmt)


State 88

  202 async_stmt: ASYNC with_stmt •

    $default  reduce using rule 202 (async_stmt)


State 89

   43 dot_name_star: • %empty
   44              | • dot_name_star DOT NAME
  188 dotted_name: NAME • dot_name_star

    $default  reduce using rule 43 (dot_name_star)

    dot_name_star  go to state 174


State 90

    4 opt_par_arglist: • %empty  [NEWLINE]
    5                | • LPAR RPAR
    6                | • LPAR arglist RPAR
  115 decorator: AT dotted_name • opt_par_arglist NEWLINE

    LPAR  shift, and go to state 175

    $default  reduce using rule 4 (opt_par_arglist)

    opt_par_arglist  go to state 176


State 91

    4 opt_par_arglist: • %empty  [COLON]
    5                | • LPAR RPAR
    6                | • LPAR arglist RPAR
  289 classdef: CLASS NAME • opt_par_arglist COLON suite

    LPAR  shift, and go to state 175

    $default  reduce using rule 4 (opt_par_arglist)

    opt_par_arglist  go to state 177


State 92

  121 funcdef: DEF NAME • parameters opt_arrow_test COLON opt_type_comment func_body_suite
  122 parameters: • LPAR RPAR
  123           | • LPAR typedargslist RPAR

    LPAR  shift, and go to state 178

    parameters  go to state 179


State 93

  101 comma_expr_star_expr_star: • %empty
  102                          | • comma_expr_star_expr_star COMMA expr
  103                          | • comma_expr_star_expr_star COMMA star_expr
  277 exprlist: expr • comma_expr_star_expr_star opt_comma

    $default  reduce using rule 101 (comma_expr_star_expr_star)

    comma_expr_star_expr_star  go to state 180


State 94

  160 del_stmt: DEL exprlist •

    $default  reduce using rule 160 (del_stmt)


State 95

  206 for_stmt: FOR exprlist • IN testlist COLON opt_type_comment suite opt_else_suite

    IN  shift, and go to state 181


State 96

  178 from_part: DOT •

    $default  reduce using rule 178 (from_part)


State 97

  179 from_part: ELLIPSIS •

    $default  reduce using rule 179 (from_part)


State 98

  177 import_from: FROM from_part • IMPORT import_part

    IMPORT  shift, and go to state 182


State 99

  180 from_part: dotted_name •

    $default  reduce using rule 180 (from_part)


State 100

   45 comma_name_star: • %empty
   46                | • comma_name_star COMMA NAME
  189 global_stmt: GLOBAL NAME • comma_name_star

    $default  reduce using rule 45 (comma_name_star)

    comma_name_star  go to state 183


State 101

  204 if_stmt: IF namedexpr_test • COLON suite elif_test_suite_star opt_else_suite

    COLON  shift, and go to state 184


State 102

   60 opt_colonass_test: • %empty  [ASYNC, COLON, COMMA, FOR, RSQB, RPAR]
   61                  | • COLONENQUAL test
  214 namedexpr_test: test • opt_colonass_test

    COLONENQUAL  shift, and go to state 185

    $default  reduce using rule 60 (opt_colonass_test)

    opt_colonass_test  go to state 186


State 103

   41 comma_dotted_as_name_star: • %empty
   42                          | • comma_dotted_as_name_star COMMA dotted_as_name
  187 dotted_as_names: dotted_as_name • comma_dotted_as_name_star

    $default  reduce using rule 41 (comma_dotted_as_name_star)

    comma_dotted_as_name_star  go to state 187


State 104

  176 import_name: IMPORT dotted_as_names •

    $default  reduce using rule 176 (import_name)


State 105

   37 opt_as_name: • %empty  [COMMA, NEWLINE, SEMICOLON]
   38            | • AS NAME
  185 dotted_as_name: dotted_name • opt_as_name

    AS  shift, and go to state 188

    $default  reduce using rule 37 (opt_as_name)

    opt_as_name  go to state 189


State 106

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  220        | LAMBDA COLON • test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 190
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 107

  245 factor: MINUS factor •

    $default  reduce using rule 245 (factor)


State 108

   45 comma_name_star: • %empty
   46                | • comma_name_star COMMA NAME
  190 nonlocal_stmt: NONLOCAL NAME • comma_name_star

    $default  reduce using rule 45 (comma_name_star)

    comma_name_star  go to state 191


State 109

  224 not_test: NOT not_test •

    $default  reduce using rule 224 (not_test)


State 110

  244 factor: PLUS factor •

    $default  reduce using rule 244 (factor)


State 111

  172 raise_stmt: RAISE test •  [NEWLINE, SEMICOLON]
  173           | RAISE test • FROM test

    FROM  shift, and go to state 192

    $default  reduce using rule 172 (raise_stmt)


State 112

  169 return_stmt: RETURN opt_testlist_star_expr •

    $default  reduce using rule 169 (return_stmt)


State 113

   36 opt_testlist_star_expr: testlist_star_expr •

    $default  reduce using rule 36 (opt_testlist_star_expr)


State 114

  237 star_expr: STAR expr •

    $default  reduce using rule 237 (star_expr)


State 115

  246 factor: TILDE factor •

    $default  reduce using rule 246 (factor)


State 116

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  207 try_stmt: TRY COLON • suite except_suite_plus opt_else_suite opt_finally_suite
  208         | TRY COLON • suite FINALLY COLON suite
  212 suite: • simple_stmt
  213      | • NEWLINE INDENT stmt_plus DEDENT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    ASSERT    shift, and go to state 4
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CONTINUE  shift, and go to state 10
    DEL       shift, and go to state 12
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NEWLINE   shift, and go to state 193
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await           go to state 35
    simple_stmt         go to state 194
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    suite               go to state 195
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_expr          go to state 83


State 117

   52 comma_with_item_star: • %empty
   53                     | • comma_with_item_star COMMA with_item
  209 with_stmt: WITH with_item • comma_with_item_star COLON opt_type_comment suite

    $default  reduce using rule 52 (comma_with_item_star)

    comma_with_item_star  go to state 196


State 118

   54 opt_as_expr: • %empty  [COLON, COMMA]
   55            | • AS expr
  210 with_item: test • opt_as_expr

    AS  shift, and go to state 197

    $default  reduce using rule 54 (opt_as_expr)

    opt_as_expr  go to state 198


State 119

  205 while_stmt: WHILE namedexpr_test • COLON suite opt_else_suite

    COLON  shift, and go to state 199


State 120

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  307 yield_arg: FROM • test

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 200
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 121

  308 yield_arg: testlist_star_expr •

    $default  reduce using rule 308 (yield_arg)


State 122

  306 yield_expr: YIELD yield_arg •

    $default  reduce using rule 306 (yield_expr)


State 123

    8 decorator_plus: decorator_plus decorator •

    $default  reduce using rule 8 (decorator_plus)


State 124

  261 atom: ELLIPSIS •

    $default  reduce using rule 261 (atom)


State 125

  264 atom: FALSE •

    $default  reduce using rule 264 (atom)


State 126

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  214 namedexpr_test: • test opt_colonass_test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  254 atom: LSQB • RSQB
  255     | LSQB • testlist_comp RSQB
  265 testlist_comp: • namedexpr_test comp_for
  266              | • namedexpr_test comma_namedexpr_test_star_expr_star opt_comma
  267              | • star_expr comp_for
  268              | • star_expr comma_namedexpr_test_star_expr_star opt_comma

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    RSQB    shift, and go to state 201
    STAR    shift, and go to state 28
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await       go to state 35
    namedexpr_test  go to state 202
    test            go to state 102
    lambdef         go to state 67
    or_test         go to state 68
    and_test        go to state 69
    not_test        go to state 70
    comparison      go to state 71
    star_expr       go to state 203
    expr            go to state 73
    xor_expr        go to state 74
    and_expr        go to state 75
    shift_expr      go to state 76
    arith_expr      go to state 77
    term            go to state 78
    factor          go to state 79
    power           go to state 80
    atom_expr       go to state 81
    testlist_comp   go to state 204


State 127

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  256 atom: LBRACE • RBRACE
  257     | LBRACE • dictorsetmaker RBRACE
  279 dictorsetmaker: • dictorsetmaker1
  280               | • dictorsetmaker2
  281 dictorsetmaker1: • test COLON test comp_for
  282                | • test COLON test comma_dict1_star opt_comma
  283                | • DOUBLESTAR expr comp_for
  284                | • DOUBLESTAR expr comma_dict1_star opt_comma
  285 dictorsetmaker2: • test comp_for
  286                | • test comma_test_star_expr_star opt_comma
  287                | • star_expr comp_for
  288                | • star_expr comma_test_star_expr_star opt_comma

    AWAIT       shift, and go to state 7
    DOUBLESTAR  shift, and go to state 205
    LAMBDA      shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 23
    PLUS        shift, and go to state 25
    RBRACE      shift, and go to state 206
    STAR        shift, and go to state 28
    TILDE       shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await        go to state 35
    test             go to state 207
    lambdef          go to state 67
    or_test          go to state 68
    and_test         go to state 69
    not_test         go to state 70
    comparison       go to state 71
    star_expr        go to state 208
    expr             go to state 73
    xor_expr         go to state 74
    and_expr         go to state 75
    shift_expr       go to state 76
    arith_expr       go to state 77
    term             go to state 78
    factor           go to state 79
    power            go to state 80
    atom_expr        go to state 81
    dictorsetmaker   go to state 209
    dictorsetmaker1  go to state 210
    dictorsetmaker2  go to state 211


State 128

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  214 namedexpr_test: • test opt_colonass_test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  251 atom: LPAR • RPAR
  252     | LPAR • yield_expr RPAR
  253     | LPAR • testlist_comp RPAR
  265 testlist_comp: • namedexpr_test comp_for
  266              | • namedexpr_test comma_namedexpr_test_star_expr_star opt_comma
  267              | • star_expr comp_for
  268              | • star_expr comma_namedexpr_test_star_expr_star opt_comma
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    RPAR    shift, and go to state 212
    STAR    shift, and go to state 28
    TILDE   shift, and go to state 29
    YIELD   shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await       go to state 35
    namedexpr_test  go to state 202
    test            go to state 102
    lambdef         go to state 67
    or_test         go to state 68
    and_test        go to state 69
    not_test        go to state 70
    comparison      go to state 71
    star_expr       go to state 203
    expr            go to state 73
    xor_expr        go to state 74
    and_expr        go to state 75
    shift_expr      go to state 76
    arith_expr      go to state 77
    term            go to state 78
    factor          go to state 79
    power           go to state 80
    atom_expr       go to state 81
    testlist_comp   go to state 213
    yield_expr      go to state 214


State 129

  258 atom: NAME •

    $default  reduce using rule 258 (atom)


State 130

  262 atom: NONE •

    $default  reduce using rule 262 (atom)


State 131

  259 atom: NUMBER •

    $default  reduce using rule 259 (atom)


State 132

   90 string_plus: STRING •

    $default  reduce using rule 90 (string_plus)


State 133

  263 atom: TRUE •

    $default  reduce using rule 263 (atom)


State 134

   91 string_plus: string_plus • STRING
  260 atom: string_plus •  [AND, AMPER, AMPEREQUAL, AS, EQUAL, ASYNC, AT, ATEQUAL, COLON, COLONENQUAL, COMMA, DOT, DOUBLESLASH, DOUBLESLASHEQUAL, DOUBLESTAR, DOUBLESTAREQUAL, EQEQUAL, ELSE, FOR, FROM, GREATEREQUAL, GREATER, IF, IN, IS, LSQB, LESSEQUAL, LPAR, LEFTSHIFT, LEFTSHIFTEQUAL, LESS, MINUS, MINUSEQUAL, NOTEQUAL, NEWLINE, NOT, OR, VBAR, VBAREQUAL, PERCENT, PERCENTEQUAL, PLUS, PLUSEQUAL, RSQB, RBRACE, RPAR, RIGHTSHIFT, RIGHTSHIFTEQUAL, SEMICOLON, SLASH, SLASHEQUAL, STAR, STAREQUAL, TYPE_COMMENT, CIRCUMFLEX, CIRCUMFLEXEQUAL]

    STRING  shift, and go to state 215

    $default  reduce using rule 260 (atom)


State 135

   88 trailer_star: • %empty
   89             | • trailer_star trailer
  250 atom_expr: opt_await atom • trailer_star

    $default  reduce using rule 88 (trailer_star)

    trailer_star  go to state 216


State 136

  120 async_funcdef: ASYNC • funcdef
  121 funcdef: • DEF NAME parameters opt_arrow_test COLON opt_type_comment func_body_suite

    DEF  shift, and go to state 11

    funcdef  go to state 217


State 137

  119 decorated: decorators async_funcdef •

    $default  reduce using rule 119 (decorated)


State 138

  118 decorated: decorators funcdef •

    $default  reduce using rule 118 (decorated)


State 139

  117 decorated: decorators classdef •

    $default  reduce using rule 117 (decorated)


State 140

   22 semi_small_stmt_star: semi_small_stmt_star • SEMICOLON small_stmt
   23 opt_semi: • %empty  [NEWLINE]
   24         | • SEMICOLON
  130 simple_stmt: small_stmt semi_small_stmt_star • opt_semi NEWLINE

    SEMICOLON  shift, and go to state 218

    $default  reduce using rule 23 (opt_semi)

    opt_semi  go to state 219


State 141

  153 augassign: AMPEREQUAL •

    $default  reduce using rule 153 (augassign)


State 142

   25 assing_yield_or_test_plus: EQUAL • yield_expr
   26                          | EQUAL • testlist_star_expr
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    STAR    shift, and go to state 28
    TILDE   shift, and go to state 29
    YIELD   shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await           go to state 35
    testlist_star_expr  go to state 220
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_expr          go to state 221


State 143

  150 augassign: ATEQUAL •

    $default  reduce using rule 150 (augassign)


State 144

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  144 annassign: COLON • test opt_assing_yield_or_test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 222
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 145

  159 augassign: DOUBLESLASHEQUAL •

    $default  reduce using rule 159 (augassign)


State 146

  158 augassign: DOUBLESTAREQUAL •

    $default  reduce using rule 158 (augassign)


State 147

  156 augassign: LEFTSHIFTEQUAL •

    $default  reduce using rule 156 (augassign)


State 148

  148 augassign: MINUSEQUAL •

    $default  reduce using rule 148 (augassign)


State 149

  154 augassign: VBAREQUAL •

    $default  reduce using rule 154 (augassign)


State 150

  152 augassign: PERCENTEQUAL •

    $default  reduce using rule 152 (augassign)


State 151

  147 augassign: PLUSEQUAL •

    $default  reduce using rule 147 (augassign)


State 152

  157 augassign: RIGHTSHIFTEQUAL •

    $default  reduce using rule 157 (augassign)


State 153

  151 augassign: SLASHEQUAL •

    $default  reduce using rule 151 (augassign)


State 154

  149 augassign: STAREQUAL •

    $default  reduce using rule 149 (augassign)


State 155

  155 augassign: CIRCUMFLEXEQUAL •

    $default  reduce using rule 155 (augassign)


State 156

   11 opt_type_comment: • %empty  [NEWLINE, SEMICOLON]
   12                 | • TYPE_COMMENT
   27 assing_yield_or_test_plus: assing_yield_or_test_plus • EQUAL yield_expr
   28                          | assing_yield_or_test_plus • EQUAL testlist_star_expr
  143 expr_stmt: testlist_star_expr assing_yield_or_test_plus • opt_type_comment

    EQUAL         shift, and go to state 223
    TYPE_COMMENT  shift, and go to state 224

    $default  reduce using rule 11 (opt_type_comment)

    opt_type_comment  go to state 225


State 157

  139 expr_stmt: testlist_star_expr annassign •

    $default  reduce using rule 139 (expr_stmt)


State 158

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  140 expr_stmt: testlist_star_expr augassign • yield_expr
  141          | testlist_star_expr augassign • testlist
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  278 testlist: • test comma_test_star opt_comma
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29
    YIELD   shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 226
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81
    testlist    go to state 227
    yield_expr  go to state 228


State 159

   17 opt_comma: • %empty  [AMPEREQUAL, EQUAL, ATEQUAL, COLON, DOUBLESLASHEQUAL, DOUBLESTAREQUAL, LEFTSHIFTEQUAL, MINUSEQUAL, NEWLINE, VBAREQUAL, PERCENTEQUAL, PLUSEQUAL, RPAR, RIGHTSHIFTEQUAL, SEMICOLON, SLASHEQUAL, STAREQUAL, TYPE_COMMENT, CIRCUMFLEXEQUAL]
   18          | • COMMA
   33 comma_test_star_expr_star: comma_test_star_expr_star • COMMA test
   34                          | comma_test_star_expr_star • COMMA star_expr
  145 testlist_star_expr: test comma_test_star_expr_star • opt_comma

    COMMA  shift, and go to state 229

    $default  reduce using rule 17 (opt_comma)

    opt_comma  go to state 230


State 160

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  216 test: or_test IF • or_test ELSE test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    NOT    shift, and go to state 23
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    or_test     go to state 231
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 161

   63 or_and_test_star: or_and_test_star • OR and_test
  222 or_test: and_test or_and_test_star •  [AMPEREQUAL, AS, EQUAL, ASYNC, ATEQUAL, COLON, COLONENQUAL, COMMA, DOUBLESLASHEQUAL, DOUBLESTAREQUAL, ELSE, FOR, FROM, IF, LEFTSHIFTEQUAL, MINUSEQUAL, NEWLINE, VBAREQUAL, PERCENTEQUAL, PLUSEQUAL, RSQB, RBRACE, RPAR, RIGHTSHIFTEQUAL, SEMICOLON, SLASHEQUAL, STAREQUAL, TYPE_COMMENT, CIRCUMFLEXEQUAL]

    OR  shift, and go to state 232

    $default  reduce using rule 222 (or_test)


State 162

   65 and_not_test_star: and_not_test_star • AND not_test
  223 and_test: not_test and_not_test_star •  [AMPEREQUAL, AS, EQUAL, ASYNC, ATEQUAL, COLON, COLONENQUAL, COMMA, DOUBLESLASHEQUAL, DOUBLESTAREQUAL, ELSE, FOR, FROM, IF, LEFTSHIFTEQUAL, MINUSEQUAL, NEWLINE, OR, VBAREQUAL, PERCENTEQUAL, PLUSEQUAL, RSQB, RBRACE, RPAR, RIGHTSHIFTEQUAL, SEMICOLON, SLASHEQUAL, STAREQUAL, TYPE_COMMENT, CIRCUMFLEXEQUAL]

    AND  shift, and go to state 233

    $default  reduce using rule 223 (and_test)


State 163

   17 opt_comma: • %empty  [AMPEREQUAL, EQUAL, ATEQUAL, COLON, DOUBLESLASHEQUAL, DOUBLESTAREQUAL, LEFTSHIFTEQUAL, MINUSEQUAL, NEWLINE, VBAREQUAL, PERCENTEQUAL, PLUSEQUAL, RPAR, RIGHTSHIFTEQUAL, SEMICOLON, SLASHEQUAL, STAREQUAL, TYPE_COMMENT, CIRCUMFLEXEQUAL]
   18          | • COMMA
   33 comma_test_star_expr_star: comma_test_star_expr_star • COMMA test
   34                          | comma_test_star_expr_star • COMMA star_expr
  146 testlist_star_expr: star_expr comma_test_star_expr_star • opt_comma

    COMMA  shift, and go to state 229

    $default  reduce using rule 17 (opt_comma)

    opt_comma  go to state 234


State 164

   67 comp_op_expr_star: comp_op_expr_star • comp_op expr
  226 comparison: expr comp_op_expr_star •  [AND, AMPEREQUAL, AS, EQUAL, ASYNC, ATEQUAL, COLON, COLONENQUAL, COMMA, DOUBLESLASHEQUAL, DOUBLESTAREQUAL, ELSE, FOR, FROM, IF, LEFTSHIFTEQUAL, MINUSEQUAL, NEWLINE, OR, VBAREQUAL, PERCENTEQUAL, PLUSEQUAL, RSQB, RBRACE, RPAR, RIGHTSHIFTEQUAL, SEMICOLON, SLASHEQUAL, STAREQUAL, TYPE_COMMENT, CIRCUMFLEXEQUAL]
  227 comp_op: • LESS
  228        | • GREATER
  229        | • EQEQUAL
  230        | • GREATEREQUAL
  231        | • LESSEQUAL
  232        | • NOTEQUAL
  233        | • IN
  234        | • NOT IN
  235        | • IS
  236        | • IS NOT

    EQEQUAL       shift, and go to state 235
    GREATEREQUAL  shift, and go to state 236
    GREATER       shift, and go to state 237
    IN            shift, and go to state 238
    IS            shift, and go to state 239
    LESSEQUAL     shift, and go to state 240
    LESS          shift, and go to state 241
    NOTEQUAL      shift, and go to state 242
    NOT           shift, and go to state 243

    $default  reduce using rule 226 (comparison)

    comp_op  go to state 244


State 165

   69 or_xor_expr_star: or_xor_expr_star • VBAR xor_expr
  238 expr: xor_expr or_xor_expr_star •  [AND, AMPEREQUAL, AS, EQUAL, ASYNC, ATEQUAL, COLON, COLONENQUAL, COMMA, DOUBLESLASHEQUAL, DOUBLESTAREQUAL, EQEQUAL, ELSE, FOR, FROM, GREATEREQUAL, GREATER, IF, IN, IS, LESSEQUAL, LEFTSHIFTEQUAL, LESS, MINUSEQUAL, NOTEQUAL, NEWLINE, NOT, OR, VBAREQUAL, PERCENTEQUAL, PLUSEQUAL, RSQB, RBRACE, RPAR, RIGHTSHIFTEQUAL, SEMICOLON, SLASHEQUAL, STAREQUAL, TYPE_COMMENT, CIRCUMFLEXEQUAL]

    VBAR  shift, and go to state 245

    $default  reduce using rule 238 (expr)


State 166

   71 xor_and_expr_star: xor_and_expr_star • CIRCUMFLEX and_expr
  239 xor_expr: and_expr xor_and_expr_star •  [AND, AMPEREQUAL, AS, EQUAL, ASYNC, ATEQUAL, COLON, COLONENQUAL, COMMA, DOUBLESLASHEQUAL, DOUBLESTAREQUAL, EQEQUAL, ELSE, FOR, FROM, GREATEREQUAL, GREATER, IF, IN, IS, LESSEQUAL, LEFTSHIFTEQUAL, LESS, MINUSEQUAL, NOTEQUAL, NEWLINE, NOT, OR, VBAR, VBAREQUAL, PERCENTEQUAL, PLUSEQUAL, RSQB, RBRACE, RPAR, RIGHTSHIFTEQUAL, SEMICOLON, SLASHEQUAL, STAREQUAL, TYPE_COMMENT, CIRCUMFLEXEQUAL]

    CIRCUMFLEX  shift, and go to state 246

    $default  reduce using rule 239 (xor_expr)


State 167

   73 and_shift_expr_star: and_shift_expr_star • AMPER shift_expr
  240 and_expr: shift_expr and_shift_expr_star •  [AND, AMPEREQUAL, AS, EQUAL, ASYNC, ATEQUAL, COLON, COLONENQUAL, COMMA, DOUBLESLASHEQUAL, DOUBLESTAREQUAL, EQEQUAL, ELSE, FOR, FROM, GREATEREQUAL, GREATER, IF, IN, IS, LESSEQUAL, LEFTSHIFTEQUAL, LESS, MINUSEQUAL, NOTEQUAL, NEWLINE, NOT, OR, VBAR, VBAREQUAL, PERCENTEQUAL, PLUSEQUAL, RSQB, RBRACE, RPAR, RIGHTSHIFTEQUAL, SEMICOLON, SLASHEQUAL, STAREQUAL, TYPE_COMMENT, CIRCUMFLEX, CIRCUMFLEXEQUAL]

    AMPER  shift, and go to state 247

    $default  reduce using rule 240 (and_expr)


State 168

   75 shift_arith_expr_star: shift_arith_expr_star • LEFTSHIFT arith_expr
   76                      | shift_arith_expr_star • RIGHTSHIFT arith_expr
  241 shift_expr: arith_expr shift_arith_expr_star •  [AND, AMPER, AMPEREQUAL, AS, EQUAL, ASYNC, ATEQUAL, COLON, COLONENQUAL, COMMA, DOUBLESLASHEQUAL, DOUBLESTAREQUAL, EQEQUAL, ELSE, FOR, FROM, GREATEREQUAL, GREATER, IF, IN, IS, LESSEQUAL, LEFTSHIFTEQUAL, LESS, MINUSEQUAL, NOTEQUAL, NEWLINE, NOT, OR, VBAR, VBAREQUAL, PERCENTEQUAL, PLUSEQUAL, RSQB, RBRACE, RPAR, RIGHTSHIFTEQUAL, SEMICOLON, SLASHEQUAL, STAREQUAL, TYPE_COMMENT, CIRCUMFLEX, CIRCUMFLEXEQUAL]

    LEFTSHIFT   shift, and go to state 248
    RIGHTSHIFT  shift, and go to state 249

    $default  reduce using rule 241 (shift_expr)


State 169

   78 op_term_star: op_term_star • PLUS term
   79             | op_term_star • MINUS term
  242 arith_expr: term op_term_star •  [AND, AMPER, AMPEREQUAL, AS, EQUAL, ASYNC, ATEQUAL, COLON, COLONENQUAL, COMMA, DOUBLESLASHEQUAL, DOUBLESTAREQUAL, EQEQUAL, ELSE, FOR, FROM, GREATEREQUAL, GREATER, IF, IN, IS, LESSEQUAL, LEFTSHIFT, LEFTSHIFTEQUAL, LESS, MINUSEQUAL, NOTEQUAL, NEWLINE, NOT, OR, VBAR, VBAREQUAL, PERCENTEQUAL, PLUSEQUAL, RSQB, RBRACE, RPAR, RIGHTSHIFT, RIGHTSHIFTEQUAL, SEMICOLON, SLASHEQUAL, STAREQUAL, TYPE_COMMENT, CIRCUMFLEX, CIRCUMFLEXEQUAL]

    MINUS  shift, and go to state 250
    PLUS   shift, and go to state 251

    $default  reduce using rule 242 (arith_expr)


State 170

   81 op_factor_star: op_factor_star • STAR factor
   82               | op_factor_star • AT factor
   83               | op_factor_star • SLASH factor
   84               | op_factor_star • PERCENT factor
   85               | op_factor_star • DOUBLESLASH factor
  243 term: factor op_factor_star •  [AND, AMPER, AMPEREQUAL, AS, EQUAL, ASYNC, ATEQUAL, COLON, COLONENQUAL, COMMA, DOUBLESLASHEQUAL, DOUBLESTAREQUAL, EQEQUAL, ELSE, FOR, FROM, GREATEREQUAL, GREATER, IF, IN, IS, LESSEQUAL, LEFTSHIFT, LEFTSHIFTEQUAL, LESS, MINUS, MINUSEQUAL, NOTEQUAL, NEWLINE, NOT, OR, VBAR, VBAREQUAL, PERCENTEQUAL, PLUS, PLUSEQUAL, RSQB, RBRACE, RPAR, RIGHTSHIFT, RIGHTSHIFTEQUAL, SEMICOLON, SLASHEQUAL, STAREQUAL, TYPE_COMMENT, CIRCUMFLEX, CIRCUMFLEXEQUAL]

    AT           shift, and go to state 252
    DOUBLESLASH  shift, and go to state 253
    PERCENT      shift, and go to state 254
    SLASH        shift, and go to state 255
    STAR         shift, and go to state 256

    $default  reduce using rule 243 (term)


State 171

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  249      | atom_expr DOUBLESTAR • factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await  go to state 35
    factor     go to state 257
    power      go to state 80
    atom_expr  go to state 81


State 172

   48 opt_comma_test: COMMA • test
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 258
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 173

  191 assert_stmt: ASSERT test opt_comma_test •

    $default  reduce using rule 191 (assert_stmt)


State 174

   44 dot_name_star: dot_name_star • DOT NAME
  188 dotted_name: NAME dot_name_star •  [AS, COMMA, IMPORT, LPAR, NEWLINE, SEMICOLON]

    DOT  shift, and go to state 259

    $default  reduce using rule 188 (dotted_name)


State 175

    5 opt_par_arglist: LPAR • RPAR
    6                | LPAR • arglist RPAR
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  290 arglist: • argument1 comma_argument_star opt_comma
  291 argument1: • test
  292          | • test comp_for
  293          | • test COLONENQUAL test
  294          | • test EQUAL test
  295          | • DOUBLESTAR test
  296          | • STAR test

    AWAIT       shift, and go to state 7
    DOUBLESTAR  shift, and go to state 260
    LAMBDA      shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 23
    PLUS        shift, and go to state 25
    RPAR        shift, and go to state 261
    STAR        shift, and go to state 262
    TILDE       shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 263
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81
    arglist     go to state 264
    argument1   go to state 265


State 176

  115 decorator: AT dotted_name opt_par_arglist • NEWLINE

    NEWLINE  shift, and go to state 266


State 177

  289 classdef: CLASS NAME opt_par_arglist • COLON suite

    COLON  shift, and go to state 267


State 178

  122 parameters: LPAR • RPAR
  123           | LPAR • typedargslist RPAR
  124 arguments: • argument comma_argument_star
  125 argument: • tfpdef opt_assign_test
  126 typedargslist: • arguments
  127 tfpdef: • NAME opt_colon_test

    NAME  shift, and go to state 268
    RPAR  shift, and go to state 269

    arguments      go to state 270
    argument       go to state 271
    typedargslist  go to state 272
    tfpdef         go to state 273


State 179

    9 opt_arrow_test: • %empty  [COLON]
   10               | • ARROW test
  121 funcdef: DEF NAME parameters • opt_arrow_test COLON opt_type_comment func_body_suite

    ARROW  shift, and go to state 274

    $default  reduce using rule 9 (opt_arrow_test)

    opt_arrow_test  go to state 275


State 180

   17 opt_comma: • %empty  [IN, NEWLINE, SEMICOLON]
   18          | • COMMA
  102 comma_expr_star_expr_star: comma_expr_star_expr_star • COMMA expr
  103                          | comma_expr_star_expr_star • COMMA star_expr
  277 exprlist: expr comma_expr_star_expr_star • opt_comma

    COMMA  shift, and go to state 276

    $default  reduce using rule 17 (opt_comma)

    opt_comma  go to state 277


State 181

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  206 for_stmt: FOR exprlist IN • testlist COLON opt_type_comment suite opt_else_suite
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  278 testlist: • test comma_test_star opt_comma

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 226
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81
    testlist    go to state 278


State 182

  177 import_from: FROM from_part IMPORT • import_part
  181 import_part: • STAR
  182            | • LPAR import_as_names RPAR
  183            | • import_as_names
  184 import_as_name: • NAME opt_as_name
  186 import_as_names: • import_as_name comma_import_as_name_star opt_comma

    LPAR  shift, and go to state 279
    NAME  shift, and go to state 280
    STAR  shift, and go to state 281

    import_part      go to state 282
    import_as_name   go to state 283
    import_as_names  go to state 284


State 183

   46 comma_name_star: comma_name_star • COMMA NAME
  189 global_stmt: GLOBAL NAME comma_name_star •  [NEWLINE, SEMICOLON]

    COMMA  shift, and go to state 285

    $default  reduce using rule 189 (global_stmt)


State 184

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  204 if_stmt: IF namedexpr_test COLON • suite elif_test_suite_star opt_else_suite
  212 suite: • simple_stmt
  213      | • NEWLINE INDENT stmt_plus DEDENT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    ASSERT    shift, and go to state 4
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CONTINUE  shift, and go to state 10
    DEL       shift, and go to state 12
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NEWLINE   shift, and go to state 193
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await           go to state 35
    simple_stmt         go to state 194
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    suite               go to state 286
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_expr          go to state 83


State 185

   61 opt_colonass_test: COLONENQUAL • test
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 287
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 186

  214 namedexpr_test: test opt_colonass_test •

    $default  reduce using rule 214 (namedexpr_test)


State 187

   42 comma_dotted_as_name_star: comma_dotted_as_name_star • COMMA dotted_as_name
  187 dotted_as_names: dotted_as_name comma_dotted_as_name_star •  [NEWLINE, SEMICOLON]

    COMMA  shift, and go to state 288

    $default  reduce using rule 187 (dotted_as_names)


State 188

   38 opt_as_name: AS • NAME

    NAME  shift, and go to state 289


State 189

  185 dotted_as_name: dotted_name opt_as_name •

    $default  reduce using rule 185 (dotted_as_name)


State 190

  220 lambdef: LAMBDA COLON test •

    $default  reduce using rule 220 (lambdef)


State 191

   46 comma_name_star: comma_name_star • COMMA NAME
  190 nonlocal_stmt: NONLOCAL NAME comma_name_star •  [NEWLINE, SEMICOLON]

    COMMA  shift, and go to state 285

    $default  reduce using rule 190 (nonlocal_stmt)


State 192

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  173 raise_stmt: RAISE test FROM • test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 290
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 193

  213 suite: NEWLINE • INDENT stmt_plus DEDENT

    INDENT  shift, and go to state 291


State 194

  212 suite: simple_stmt •

    $default  reduce using rule 212 (suite)


State 195

  109 except_suite_plus: • except_clause COLON suite
  110                  | • except_suite_plus except_clause COLON suite
  207 try_stmt: TRY COLON suite • except_suite_plus opt_else_suite opt_finally_suite
  208         | TRY COLON suite • FINALLY COLON suite
  211 except_clause: • EXCEPT opt_test_as_name

    EXCEPT   shift, and go to state 292
    FINALLY  shift, and go to state 293

    except_suite_plus  go to state 294
    except_clause      go to state 295


State 196

   53 comma_with_item_star: comma_with_item_star • COMMA with_item
  209 with_stmt: WITH with_item comma_with_item_star • COLON opt_type_comment suite

    COLON  shift, and go to state 296
    COMMA  shift, and go to state 297


State 197

   55 opt_as_expr: AS • expr
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    expr        go to state 298
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 198

  210 with_item: test opt_as_expr •

    $default  reduce using rule 210 (with_item)


State 199

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  205 while_stmt: WHILE namedexpr_test COLON • suite opt_else_suite
  212 suite: • simple_stmt
  213      | • NEWLINE INDENT stmt_plus DEDENT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    ASSERT    shift, and go to state 4
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CONTINUE  shift, and go to state 10
    DEL       shift, and go to state 12
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NEWLINE   shift, and go to state 193
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await           go to state 35
    simple_stmt         go to state 194
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    suite               go to state 299
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_expr          go to state 83


State 200

  307 yield_arg: FROM test •

    $default  reduce using rule 307 (yield_arg)


State 201

  254 atom: LSQB RSQB •

    $default  reduce using rule 254 (atom)


State 202

   92 comma_namedexpr_test_star_expr_star: • %empty  [COMMA, RSQB, RPAR]
   93                                    | • comma_namedexpr_test_star_expr_star COMMA namedexpr_test
   94                                    | • comma_namedexpr_test_star_expr_star COMMA star_expr
  265 testlist_comp: namedexpr_test • comp_for
  266              | namedexpr_test • comma_namedexpr_test_star_expr_star opt_comma
  299 sync_comp_for: • FOR exprlist IN or_test
  300              | • FOR exprlist IN or_test comp_iter
  301 comp_for: • sync_comp_for
  302         | • ASYNC sync_comp_for

    ASYNC  shift, and go to state 300
    FOR    shift, and go to state 301

    $default  reduce using rule 92 (comma_namedexpr_test_star_expr_star)

    comma_namedexpr_test_star_expr_star  go to state 302
    sync_comp_for                        go to state 303
    comp_for                             go to state 304


State 203

   92 comma_namedexpr_test_star_expr_star: • %empty  [COMMA, RSQB, RPAR]
   93                                    | • comma_namedexpr_test_star_expr_star COMMA namedexpr_test
   94                                    | • comma_namedexpr_test_star_expr_star COMMA star_expr
  267 testlist_comp: star_expr • comp_for
  268              | star_expr • comma_namedexpr_test_star_expr_star opt_comma
  299 sync_comp_for: • FOR exprlist IN or_test
  300              | • FOR exprlist IN or_test comp_iter
  301 comp_for: • sync_comp_for
  302         | • ASYNC sync_comp_for

    ASYNC  shift, and go to state 300
    FOR    shift, and go to state 301

    $default  reduce using rule 92 (comma_namedexpr_test_star_expr_star)

    comma_namedexpr_test_star_expr_star  go to state 305
    sync_comp_for                        go to state 303
    comp_for                             go to state 306


State 204

  255 atom: LSQB testlist_comp • RSQB

    RSQB  shift, and go to state 307


State 205

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  283 dictorsetmaker1: DOUBLESTAR • expr comp_for
  284                | DOUBLESTAR • expr comma_dict1_star opt_comma

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    expr        go to state 308
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 206

  256 atom: LBRACE RBRACE •

    $default  reduce using rule 256 (atom)


State 207

   32 comma_test_star_expr_star: • %empty  [COMMA, RBRACE]
   33                          | • comma_test_star_expr_star COMMA test
   34                          | • comma_test_star_expr_star COMMA star_expr
  281 dictorsetmaker1: test • COLON test comp_for
  282                | test • COLON test comma_dict1_star opt_comma
  285 dictorsetmaker2: test • comp_for
  286                | test • comma_test_star_expr_star opt_comma
  299 sync_comp_for: • FOR exprlist IN or_test
  300              | • FOR exprlist IN or_test comp_iter
  301 comp_for: • sync_comp_for
  302         | • ASYNC sync_comp_for

    ASYNC  shift, and go to state 300
    COLON  shift, and go to state 309
    FOR    shift, and go to state 301

    $default  reduce using rule 32 (comma_test_star_expr_star)

    comma_test_star_expr_star  go to state 310
    sync_comp_for              go to state 303
    comp_for                   go to state 311


State 208

   32 comma_test_star_expr_star: • %empty  [COMMA, RBRACE]
   33                          | • comma_test_star_expr_star COMMA test
   34                          | • comma_test_star_expr_star COMMA star_expr
  287 dictorsetmaker2: star_expr • comp_for
  288                | star_expr • comma_test_star_expr_star opt_comma
  299 sync_comp_for: • FOR exprlist IN or_test
  300              | • FOR exprlist IN or_test comp_iter
  301 comp_for: • sync_comp_for
  302         | • ASYNC sync_comp_for

    ASYNC  shift, and go to state 300
    FOR    shift, and go to state 301

    $default  reduce using rule 32 (comma_test_star_expr_star)

    comma_test_star_expr_star  go to state 312
    sync_comp_for              go to state 303
    comp_for                   go to state 313


State 209

  257 atom: LBRACE dictorsetmaker • RBRACE

    RBRACE  shift, and go to state 314


State 210

  279 dictorsetmaker: dictorsetmaker1 •

    $default  reduce using rule 279 (dictorsetmaker)


State 211

  280 dictorsetmaker: dictorsetmaker2 •

    $default  reduce using rule 280 (dictorsetmaker)


State 212

  251 atom: LPAR RPAR •

    $default  reduce using rule 251 (atom)


State 213

  253 atom: LPAR testlist_comp • RPAR

    RPAR  shift, and go to state 315


State 214

  252 atom: LPAR yield_expr • RPAR

    RPAR  shift, and go to state 316


State 215

   91 string_plus: string_plus STRING •

    $default  reduce using rule 91 (string_plus)


State 216

   89 trailer_star: trailer_star • trailer
  250 atom_expr: opt_await atom trailer_star •  [AND, AMPER, AMPEREQUAL, AS, EQUAL, ASYNC, AT, ATEQUAL, COLON, COLONENQUAL, COMMA, DOUBLESLASH, DOUBLESLASHEQUAL, DOUBLESTAR, DOUBLESTAREQUAL, EQEQUAL, ELSE, FOR, FROM, GREATEREQUAL, GREATER, IF, IN, IS, LESSEQUAL, LEFTSHIFT, LEFTSHIFTEQUAL, LESS, MINUS, MINUSEQUAL, NOTEQUAL, NEWLINE, NOT, OR, VBAR, VBAREQUAL, PERCENT, PERCENTEQUAL, PLUS, PLUSEQUAL, RSQB, RBRACE, RPAR, RIGHTSHIFT, RIGHTSHIFTEQUAL, SEMICOLON, SLASH, SLASHEQUAL, STAR, STAREQUAL, TYPE_COMMENT, CIRCUMFLEX, CIRCUMFLEXEQUAL]
  269 trailer: • LPAR RPAR
  270        | • LPAR arglist RPAR
  271        | • LSQB subscriptlist RSQB
  272        | • DOT NAME

    DOT   shift, and go to state 317
    LSQB  shift, and go to state 318
    LPAR  shift, and go to state 319

    $default  reduce using rule 250 (atom_expr)

    trailer  go to state 320


State 217

  120 async_funcdef: ASYNC funcdef •

    $default  reduce using rule 120 (async_funcdef)


State 218

   22 semi_small_stmt_star: semi_small_stmt_star SEMICOLON • small_stmt
   24 opt_semi: SEMICOLON •  [NEWLINE]
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    ASSERT    shift, and go to state 4
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CONTINUE  shift, and go to state 10
    DEL       shift, and go to state 12
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    YIELD     shift, and go to state 33

    NEWLINE   reduce using rule 24 (opt_semi)
    $default  reduce using rule 86 (opt_await)

    opt_await           go to state 35
    small_stmt          go to state 321
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_expr          go to state 83


State 219

  130 simple_stmt: small_stmt semi_small_stmt_star opt_semi • NEWLINE

    NEWLINE  shift, and go to state 322


State 220

   26 assing_yield_or_test_plus: EQUAL testlist_star_expr •

    $default  reduce using rule 26 (assing_yield_or_test_plus)


State 221

   25 assing_yield_or_test_plus: EQUAL yield_expr •

    $default  reduce using rule 25 (assing_yield_or_test_plus)


State 222

   29 opt_assing_yield_or_test: • %empty  [NEWLINE, SEMICOLON]
   30                         | • EQUAL yield_expr
   31                         | • EQUAL testlist_star_expr
  144 annassign: COLON test • opt_assing_yield_or_test

    EQUAL  shift, and go to state 323

    $default  reduce using rule 29 (opt_assing_yield_or_test)

    opt_assing_yield_or_test  go to state 324


State 223

   27 assing_yield_or_test_plus: assing_yield_or_test_plus EQUAL • yield_expr
   28                          | assing_yield_or_test_plus EQUAL • testlist_star_expr
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    STAR    shift, and go to state 28
    TILDE   shift, and go to state 29
    YIELD   shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await           go to state 35
    testlist_star_expr  go to state 325
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_expr          go to state 326


State 224

   12 opt_type_comment: TYPE_COMMENT •

    $default  reduce using rule 12 (opt_type_comment)


State 225

  143 expr_stmt: testlist_star_expr assing_yield_or_test_plus opt_type_comment •

    $default  reduce using rule 143 (expr_stmt)


State 226

  104 comma_test_star: • %empty
  105                | • comma_test_star COMMA test
  278 testlist: test • comma_test_star opt_comma

    $default  reduce using rule 104 (comma_test_star)

    comma_test_star  go to state 327


State 227

  141 expr_stmt: testlist_star_expr augassign testlist •

    $default  reduce using rule 141 (expr_stmt)


State 228

  140 expr_stmt: testlist_star_expr augassign yield_expr •

    $default  reduce using rule 140 (expr_stmt)


State 229

   18 opt_comma: COMMA •  [AMPEREQUAL, EQUAL, ATEQUAL, COLON, DOUBLESLASHEQUAL, DOUBLESTAREQUAL, LEFTSHIFTEQUAL, MINUSEQUAL, NEWLINE, VBAREQUAL, PERCENTEQUAL, PLUSEQUAL, RBRACE, RPAR, RIGHTSHIFTEQUAL, SEMICOLON, SLASHEQUAL, STAREQUAL, TYPE_COMMENT, CIRCUMFLEXEQUAL]
   33 comma_test_star_expr_star: comma_test_star_expr_star COMMA • test
   34                          | comma_test_star_expr_star COMMA • star_expr
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    STAR    shift, and go to state 28
    TILDE   shift, and go to state 29

    ELLIPSIS  reduce using rule 86 (opt_await)
    FALSE     reduce using rule 86 (opt_await)
    LSQB      reduce using rule 86 (opt_await)
    LBRACE    reduce using rule 86 (opt_await)
    LPAR      reduce using rule 86 (opt_await)
    NAME      reduce using rule 86 (opt_await)
    NONE      reduce using rule 86 (opt_await)
    NUMBER    reduce using rule 86 (opt_await)
    STRING    reduce using rule 86 (opt_await)
    TRUE      reduce using rule 86 (opt_await)
    $default  reduce using rule 18 (opt_comma)

    opt_await   go to state 35
    test        go to state 328
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    star_expr   go to state 329
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 230

  145 testlist_star_expr: test comma_test_star_expr_star opt_comma •

    $default  reduce using rule 145 (testlist_star_expr)


State 231

  216 test: or_test IF or_test • ELSE test

    ELSE  shift, and go to state 330


State 232

   63 or_and_test_star: or_and_test_star OR • and_test
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    NOT    shift, and go to state 23
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    and_test    go to state 331
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 233

   65 and_not_test_star: and_not_test_star AND • not_test
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    NOT    shift, and go to state 23
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    not_test    go to state 332
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 234

  146 testlist_star_expr: star_expr comma_test_star_expr_star opt_comma •

    $default  reduce using rule 146 (testlist_star_expr)


State 235

  229 comp_op: EQEQUAL •

    $default  reduce using rule 229 (comp_op)


State 236

  230 comp_op: GREATEREQUAL •

    $default  reduce using rule 230 (comp_op)


State 237

  228 comp_op: GREATER •

    $default  reduce using rule 228 (comp_op)


State 238

  233 comp_op: IN •

    $default  reduce using rule 233 (comp_op)


State 239

  235 comp_op: IS •  [AWAIT, ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, MINUS, NAME, NONE, NUMBER, PLUS, STRING, TILDE, TRUE]
  236        | IS • NOT

    NOT  shift, and go to state 333

    $default  reduce using rule 235 (comp_op)


State 240

  231 comp_op: LESSEQUAL •

    $default  reduce using rule 231 (comp_op)


State 241

  227 comp_op: LESS •

    $default  reduce using rule 227 (comp_op)


State 242

  232 comp_op: NOTEQUAL •

    $default  reduce using rule 232 (comp_op)


State 243

  234 comp_op: NOT • IN

    IN  shift, and go to state 334


State 244

   67 comp_op_expr_star: comp_op_expr_star comp_op • expr
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    expr        go to state 335
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 245

   69 or_xor_expr_star: or_xor_expr_star VBAR • xor_expr
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    xor_expr    go to state 336
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 246

   71 xor_and_expr_star: xor_and_expr_star CIRCUMFLEX • and_expr
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    and_expr    go to state 337
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 247

   73 and_shift_expr_star: and_shift_expr_star AMPER • shift_expr
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    shift_expr  go to state 338
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 248

   75 shift_arith_expr_star: shift_arith_expr_star LEFTSHIFT • arith_expr
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    arith_expr  go to state 339
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 249

   76 shift_arith_expr_star: shift_arith_expr_star RIGHTSHIFT • arith_expr
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    arith_expr  go to state 340
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 250

   79 op_term_star: op_term_star MINUS • term
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await  go to state 35
    term       go to state 341
    factor     go to state 79
    power      go to state 80
    atom_expr  go to state 81


State 251

   78 op_term_star: op_term_star PLUS • term
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await  go to state 35
    term       go to state 342
    factor     go to state 79
    power      go to state 80
    atom_expr  go to state 81


State 252

   82 op_factor_star: op_factor_star AT • factor
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await  go to state 35
    factor     go to state 343
    power      go to state 80
    atom_expr  go to state 81


State 253

   85 op_factor_star: op_factor_star DOUBLESLASH • factor
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await  go to state 35
    factor     go to state 344
    power      go to state 80
    atom_expr  go to state 81


State 254

   84 op_factor_star: op_factor_star PERCENT • factor
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await  go to state 35
    factor     go to state 345
    power      go to state 80
    atom_expr  go to state 81


State 255

   83 op_factor_star: op_factor_star SLASH • factor
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await  go to state 35
    factor     go to state 346
    power      go to state 80
    atom_expr  go to state 81


State 256

   81 op_factor_star: op_factor_star STAR • factor
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await  go to state 35
    factor     go to state 347
    power      go to state 80
    atom_expr  go to state 81


State 257

  249 power: atom_expr DOUBLESTAR factor •

    $default  reduce using rule 249 (power)


State 258

   48 opt_comma_test: COMMA test •

    $default  reduce using rule 48 (opt_comma_test)


State 259

   44 dot_name_star: dot_name_star DOT • NAME

    NAME  shift, and go to state 348


State 260

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  295 argument1: DOUBLESTAR • test

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 349
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 261

    5 opt_par_arglist: LPAR RPAR •

    $default  reduce using rule 5 (opt_par_arglist)


State 262

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  296 argument1: STAR • test

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 350
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 263

  291 argument1: test •  [COMMA, RPAR]
  292          | test • comp_for
  293          | test • COLONENQUAL test
  294          | test • EQUAL test
  299 sync_comp_for: • FOR exprlist IN or_test
  300              | • FOR exprlist IN or_test comp_iter
  301 comp_for: • sync_comp_for
  302         | • ASYNC sync_comp_for

    EQUAL        shift, and go to state 351
    ASYNC        shift, and go to state 300
    COLONENQUAL  shift, and go to state 352
    FOR          shift, and go to state 301

    $default  reduce using rule 291 (argument1)

    sync_comp_for  go to state 303
    comp_for       go to state 353


State 264

    6 opt_par_arglist: LPAR arglist • RPAR

    RPAR  shift, and go to state 354


State 265

   13 comma_argument_star: • %empty
   14                    | • comma_argument_star COMMA opt_type_comment argument
  290 arglist: argument1 • comma_argument_star opt_comma

    $default  reduce using rule 13 (comma_argument_star)

    comma_argument_star  go to state 355


State 266

  115 decorator: AT dotted_name opt_par_arglist NEWLINE •

    $default  reduce using rule 115 (decorator)


State 267

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  212 suite: • simple_stmt
  213      | • NEWLINE INDENT stmt_plus DEDENT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  289 classdef: CLASS NAME opt_par_arglist COLON • suite
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    ASSERT    shift, and go to state 4
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CONTINUE  shift, and go to state 10
    DEL       shift, and go to state 12
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NEWLINE   shift, and go to state 193
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await           go to state 35
    simple_stmt         go to state 194
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    suite               go to state 356
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_expr          go to state 83


State 268

   19 opt_colon_test: • %empty  [EQUAL, COMMA, RPAR]
   20               | • COLON test
  127 tfpdef: NAME • opt_colon_test

    COLON  shift, and go to state 357

    $default  reduce using rule 19 (opt_colon_test)

    opt_colon_test  go to state 358


State 269

  122 parameters: LPAR RPAR •

    $default  reduce using rule 122 (parameters)


State 270

  126 typedargslist: arguments •

    $default  reduce using rule 126 (typedargslist)


State 271

   13 comma_argument_star: • %empty
   14                    | • comma_argument_star COMMA opt_type_comment argument
  124 arguments: argument • comma_argument_star

    $default  reduce using rule 13 (comma_argument_star)

    comma_argument_star  go to state 359


State 272

  123 parameters: LPAR typedargslist • RPAR

    RPAR  shift, and go to state 360


State 273

   15 opt_assign_test: • %empty  [COMMA, RPAR]
   16                | • EQUAL test
  125 argument: tfpdef • opt_assign_test

    EQUAL  shift, and go to state 361

    $default  reduce using rule 15 (opt_assign_test)

    opt_assign_test  go to state 362


State 274

   10 opt_arrow_test: ARROW • test
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 363
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 275

  121 funcdef: DEF NAME parameters opt_arrow_test • COLON opt_type_comment func_body_suite

    COLON  shift, and go to state 364


State 276

   18 opt_comma: COMMA •  [IN, NEWLINE, SEMICOLON]
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  102 comma_expr_star_expr_star: comma_expr_star_expr_star COMMA • expr
  103                          | comma_expr_star_expr_star COMMA • star_expr
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    STAR   shift, and go to state 28
    TILDE  shift, and go to state 29

    IN         reduce using rule 18 (opt_comma)
    NEWLINE    reduce using rule 18 (opt_comma)
    SEMICOLON  reduce using rule 18 (opt_comma)
    $default   reduce using rule 86 (opt_await)

    opt_await   go to state 35
    star_expr   go to state 365
    expr        go to state 366
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 277

  277 exprlist: expr comma_expr_star_expr_star opt_comma •

    $default  reduce using rule 277 (exprlist)


State 278

  206 for_stmt: FOR exprlist IN testlist • COLON opt_type_comment suite opt_else_suite

    COLON  shift, and go to state 367


State 279

  182 import_part: LPAR • import_as_names RPAR
  184 import_as_name: • NAME opt_as_name
  186 import_as_names: • import_as_name comma_import_as_name_star opt_comma

    NAME  shift, and go to state 280

    import_as_name   go to state 283
    import_as_names  go to state 368


State 280

   37 opt_as_name: • %empty  [COMMA, NEWLINE, RPAR, SEMICOLON]
   38            | • AS NAME
  184 import_as_name: NAME • opt_as_name

    AS  shift, and go to state 188

    $default  reduce using rule 37 (opt_as_name)

    opt_as_name  go to state 369


State 281

  181 import_part: STAR •

    $default  reduce using rule 181 (import_part)


State 282

  177 import_from: FROM from_part IMPORT import_part •

    $default  reduce using rule 177 (import_from)


State 283

   39 comma_import_as_name_star: • %empty
   40                          | • comma_import_as_name_star COMMA import_as_name
  186 import_as_names: import_as_name • comma_import_as_name_star opt_comma

    $default  reduce using rule 39 (comma_import_as_name_star)

    comma_import_as_name_star  go to state 370


State 284

  183 import_part: import_as_names •

    $default  reduce using rule 183 (import_part)


State 285

   46 comma_name_star: comma_name_star COMMA • NAME

    NAME  shift, and go to state 371


State 286

   49 elif_test_suite_star: • %empty
   50                     | • elif_test_suite_star ELIF namedexpr_test COLON suite
  204 if_stmt: IF namedexpr_test COLON suite • elif_test_suite_star opt_else_suite

    $default  reduce using rule 49 (elif_test_suite_star)

    elif_test_suite_star  go to state 372


State 287

   61 opt_colonass_test: COLONENQUAL test •

    $default  reduce using rule 61 (opt_colonass_test)


State 288

   42 comma_dotted_as_name_star: comma_dotted_as_name_star COMMA • dotted_as_name
  185 dotted_as_name: • dotted_name opt_as_name
  188 dotted_name: • NAME dot_name_star

    NAME  shift, and go to state 89

    dotted_as_name  go to state 373
    dotted_name     go to state 105


State 289

   38 opt_as_name: AS NAME •

    $default  reduce using rule 38 (opt_as_name)


State 290

  173 raise_stmt: RAISE test FROM test •

    $default  reduce using rule 173 (raise_stmt)


State 291

    7 decorator_plus: • decorator
    8               | • decorator_plus decorator
   58 stmt_plus: • stmt
   59          | • stmt_plus stmt
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  115 decorator: • AT dotted_name opt_par_arglist NEWLINE
  116 decorators: • decorator_plus
  117 decorated: • decorators classdef
  118          | • decorators funcdef
  119          | • decorators async_funcdef
  121 funcdef: • DEF NAME parameters opt_arrow_test COLON opt_type_comment func_body_suite
  128 stmt: • simple_stmt
  129     | • compound_stmt
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  192 compound_stmt: • if_stmt
  193              | • while_stmt
  194              | • for_stmt
  195              | • try_stmt
  196              | • with_stmt
  197              | • funcdef
  198              | • classdef
  199              | • decorated
  200              | • async_stmt
  201 async_stmt: • ASYNC funcdef
  202           | • ASYNC with_stmt
  203           | • ASYNC for_stmt
  204 if_stmt: • IF namedexpr_test COLON suite elif_test_suite_star opt_else_suite
  205 while_stmt: • WHILE namedexpr_test COLON suite opt_else_suite
  206 for_stmt: • FOR exprlist IN testlist COLON opt_type_comment suite opt_else_suite
  207 try_stmt: • TRY COLON suite except_suite_plus opt_else_suite opt_finally_suite
  208         | • TRY COLON suite FINALLY COLON suite
  209 with_stmt: • WITH with_item comma_with_item_star COLON opt_type_comment suite
  213 suite: NEWLINE INDENT • stmt_plus DEDENT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  289 classdef: • CLASS NAME opt_par_arglist COLON suite
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    ASSERT    shift, and go to state 4
    ASYNC     shift, and go to state 5
    AT        shift, and go to state 6
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CLASS     shift, and go to state 9
    CONTINUE  shift, and go to state 10
    DEF       shift, and go to state 11
    DEL       shift, and go to state 12
    FOR       shift, and go to state 14
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IF        shift, and go to state 17
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    TRY       shift, and go to state 30
    WITH      shift, and go to state 31
    WHILE     shift, and go to state 32
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    decorator_plus      go to state 34
    stmt_plus           go to state 374
    opt_await           go to state 35
    decorator           go to state 36
    decorators          go to state 37
    decorated           go to state 38
    funcdef             go to state 39
    stmt                go to state 375
    simple_stmt         go to state 41
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    compound_stmt       go to state 59
    async_stmt          go to state 60
    if_stmt             go to state 61
    while_stmt          go to state 62
    for_stmt            go to state 63
    try_stmt            go to state 64
    with_stmt           go to state 65
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    classdef            go to state 82
    yield_expr          go to state 83


State 292

   56 opt_test_as_name: • %empty  [COLON]
   57                 | • test opt_as_name
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  211 except_clause: EXCEPT • opt_test_as_name
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    COLON     reduce using rule 56 (opt_test_as_name)
    $default  reduce using rule 86 (opt_await)

    opt_test_as_name  go to state 376
    opt_await         go to state 35
    test              go to state 377
    lambdef           go to state 67
    or_test           go to state 68
    and_test          go to state 69
    not_test          go to state 70
    comparison        go to state 71
    expr              go to state 73
    xor_expr          go to state 74
    and_expr          go to state 75
    shift_expr        go to state 76
    arith_expr        go to state 77
    term              go to state 78
    factor            go to state 79
    power             go to state 80
    atom_expr         go to state 81


State 293

  208 try_stmt: TRY COLON suite FINALLY • COLON suite

    COLON  shift, and go to state 378


State 294

   51 opt_else_suite: • ELSE COLON suite
  110 except_suite_plus: except_suite_plus • except_clause COLON suite
  207 try_stmt: TRY COLON suite except_suite_plus • opt_else_suite opt_finally_suite
  211 except_clause: • EXCEPT opt_test_as_name

    ELSE    shift, and go to state 379
    EXCEPT  shift, and go to state 292

    opt_else_suite  go to state 380
    except_clause   go to state 381


State 295

  109 except_suite_plus: except_clause • COLON suite

    COLON  shift, and go to state 382


State 296

   11 opt_type_comment: • %empty  [ASSERT, AWAIT, BREAK, CONTINUE, DEL, ELLIPSIS, FALSE, FROM, GLOBAL, IMPORT, LAMBDA, LSQB, LBRACE, LPAR, MINUS, NAME, NEWLINE, NONE, NONLOCAL, NOT, NUMBER, PASS, PLUS, RAISE, RETURN, STAR, STRING, TILDE, TRUE, YIELD]
   12                 | • TYPE_COMMENT
  209 with_stmt: WITH with_item comma_with_item_star COLON • opt_type_comment suite

    TYPE_COMMENT  shift, and go to state 224

    $default  reduce using rule 11 (opt_type_comment)

    opt_type_comment  go to state 383


State 297

   53 comma_with_item_star: comma_with_item_star COMMA • with_item
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  210 with_item: • test opt_as_expr
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    with_item   go to state 384
    test        go to state 118
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 298

   55 opt_as_expr: AS expr •

    $default  reduce using rule 55 (opt_as_expr)


State 299

   51 opt_else_suite: • ELSE COLON suite
  205 while_stmt: WHILE namedexpr_test COLON suite • opt_else_suite

    ELSE  shift, and go to state 379

    opt_else_suite  go to state 385


State 300

  299 sync_comp_for: • FOR exprlist IN or_test
  300              | • FOR exprlist IN or_test comp_iter
  302 comp_for: ASYNC • sync_comp_for

    FOR  shift, and go to state 301

    sync_comp_for  go to state 386


State 301

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  277 exprlist: • expr comma_expr_star_expr_star opt_comma
  299 sync_comp_for: FOR • exprlist IN or_test
  300              | FOR • exprlist IN or_test comp_iter

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    expr        go to state 93
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81
    exprlist    go to state 387


State 302

   17 opt_comma: • %empty  [RSQB, RPAR]
   18          | • COMMA
   93 comma_namedexpr_test_star_expr_star: comma_namedexpr_test_star_expr_star • COMMA namedexpr_test
   94                                    | comma_namedexpr_test_star_expr_star • COMMA star_expr
  266 testlist_comp: namedexpr_test comma_namedexpr_test_star_expr_star • opt_comma

    COMMA  shift, and go to state 388

    $default  reduce using rule 17 (opt_comma)

    opt_comma  go to state 389


State 303

  301 comp_for: sync_comp_for •

    $default  reduce using rule 301 (comp_for)


State 304

  265 testlist_comp: namedexpr_test comp_for •

    $default  reduce using rule 265 (testlist_comp)


State 305

   17 opt_comma: • %empty  [RSQB, RPAR]
   18          | • COMMA
   93 comma_namedexpr_test_star_expr_star: comma_namedexpr_test_star_expr_star • COMMA namedexpr_test
   94                                    | comma_namedexpr_test_star_expr_star • COMMA star_expr
  268 testlist_comp: star_expr comma_namedexpr_test_star_expr_star • opt_comma

    COMMA  shift, and go to state 388

    $default  reduce using rule 17 (opt_comma)

    opt_comma  go to state 390


State 306

  267 testlist_comp: star_expr comp_for •

    $default  reduce using rule 267 (testlist_comp)


State 307

  255 atom: LSQB testlist_comp RSQB •

    $default  reduce using rule 255 (atom)


State 308

  106 comma_dict1_star: • %empty  [COMMA, RBRACE]
  107                 | • comma_dict1_star COMMA test COLON test
  108                 | • comma_dict1_star COMMA DOUBLESTAR expr
  283 dictorsetmaker1: DOUBLESTAR expr • comp_for
  284                | DOUBLESTAR expr • comma_dict1_star opt_comma
  299 sync_comp_for: • FOR exprlist IN or_test
  300              | • FOR exprlist IN or_test comp_iter
  301 comp_for: • sync_comp_for
  302         | • ASYNC sync_comp_for

    ASYNC  shift, and go to state 300
    FOR    shift, and go to state 301

    $default  reduce using rule 106 (comma_dict1_star)

    comma_dict1_star  go to state 391
    sync_comp_for     go to state 303
    comp_for          go to state 392


State 309

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  281 dictorsetmaker1: test COLON • test comp_for
  282                | test COLON • test comma_dict1_star opt_comma

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 393
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 310

   17 opt_comma: • %empty  [RBRACE]
   18          | • COMMA
   33 comma_test_star_expr_star: comma_test_star_expr_star • COMMA test
   34                          | comma_test_star_expr_star • COMMA star_expr
  286 dictorsetmaker2: test comma_test_star_expr_star • opt_comma

    COMMA  shift, and go to state 229

    $default  reduce using rule 17 (opt_comma)

    opt_comma  go to state 394


State 311

  285 dictorsetmaker2: test comp_for •

    $default  reduce using rule 285 (dictorsetmaker2)


State 312

   17 opt_comma: • %empty  [RBRACE]
   18          | • COMMA
   33 comma_test_star_expr_star: comma_test_star_expr_star • COMMA test
   34                          | comma_test_star_expr_star • COMMA star_expr
  288 dictorsetmaker2: star_expr comma_test_star_expr_star • opt_comma

    COMMA  shift, and go to state 229

    $default  reduce using rule 17 (opt_comma)

    opt_comma  go to state 395


State 313

  287 dictorsetmaker2: star_expr comp_for •

    $default  reduce using rule 287 (dictorsetmaker2)


State 314

  257 atom: LBRACE dictorsetmaker RBRACE •

    $default  reduce using rule 257 (atom)


State 315

  253 atom: LPAR testlist_comp RPAR •

    $default  reduce using rule 253 (atom)


State 316

  252 atom: LPAR yield_expr RPAR •

    $default  reduce using rule 252 (atom)


State 317

  272 trailer: DOT • NAME

    NAME  shift, and go to state 396


State 318

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
   97 opt_test: • %empty  [COLON]
   98         | • test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  271 trailer: LSQB • subscriptlist RSQB
  273 subscriptlist: • subscript comma_subscript_star opt_comma
  274 subscript: • test
  275          | • opt_test COLON opt_test opt_sliceop

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    COLON     reduce using rule 97 (opt_test)
    $default  reduce using rule 86 (opt_await)

    opt_await      go to state 35
    opt_test       go to state 397
    test           go to state 398
    lambdef        go to state 67
    or_test        go to state 68
    and_test       go to state 69
    not_test       go to state 70
    comparison     go to state 71
    expr           go to state 73
    xor_expr       go to state 74
    and_expr       go to state 75
    shift_expr     go to state 76
    arith_expr     go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    atom_expr      go to state 81
    subscriptlist  go to state 399
    subscript      go to state 400


State 319

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  269 trailer: LPAR • RPAR
  270        | LPAR • arglist RPAR
  290 arglist: • argument1 comma_argument_star opt_comma
  291 argument1: • test
  292          | • test comp_for
  293          | • test COLONENQUAL test
  294          | • test EQUAL test
  295          | • DOUBLESTAR test
  296          | • STAR test

    AWAIT       shift, and go to state 7
    DOUBLESTAR  shift, and go to state 260
    LAMBDA      shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 23
    PLUS        shift, and go to state 25
    RPAR        shift, and go to state 401
    STAR        shift, and go to state 262
    TILDE       shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 263
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81
    arglist     go to state 402
    argument1   go to state 265


State 320

   89 trailer_star: trailer_star trailer •

    $default  reduce using rule 89 (trailer_star)


State 321

   22 semi_small_stmt_star: semi_small_stmt_star SEMICOLON small_stmt •

    $default  reduce using rule 22 (semi_small_stmt_star)


State 322

  130 simple_stmt: small_stmt semi_small_stmt_star opt_semi NEWLINE •

    $default  reduce using rule 130 (simple_stmt)


State 323

   30 opt_assing_yield_or_test: EQUAL • yield_expr
   31                         | EQUAL • testlist_star_expr
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    STAR    shift, and go to state 28
    TILDE   shift, and go to state 29
    YIELD   shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await           go to state 35
    testlist_star_expr  go to state 403
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_expr          go to state 404


State 324

  144 annassign: COLON test opt_assing_yield_or_test •

    $default  reduce using rule 144 (annassign)


State 325

   28 assing_yield_or_test_plus: assing_yield_or_test_plus EQUAL testlist_star_expr •

    $default  reduce using rule 28 (assing_yield_or_test_plus)


State 326

   27 assing_yield_or_test_plus: assing_yield_or_test_plus EQUAL yield_expr •

    $default  reduce using rule 27 (assing_yield_or_test_plus)


State 327

   17 opt_comma: • %empty  [COLON, NEWLINE, SEMICOLON]
   18          | • COMMA
  105 comma_test_star: comma_test_star • COMMA test
  278 testlist: test comma_test_star • opt_comma

    COMMA  shift, and go to state 405

    $default  reduce using rule 17 (opt_comma)

    opt_comma  go to state 406


State 328

   33 comma_test_star_expr_star: comma_test_star_expr_star COMMA test •

    $default  reduce using rule 33 (comma_test_star_expr_star)


State 329

   34 comma_test_star_expr_star: comma_test_star_expr_star COMMA star_expr •

    $default  reduce using rule 34 (comma_test_star_expr_star)


State 330

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  216     | or_test IF or_test ELSE • test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 407
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 331

   63 or_and_test_star: or_and_test_star OR and_test •

    $default  reduce using rule 63 (or_and_test_star)


State 332

   65 and_not_test_star: and_not_test_star AND not_test •

    $default  reduce using rule 65 (and_not_test_star)


State 333

  236 comp_op: IS NOT •

    $default  reduce using rule 236 (comp_op)


State 334

  234 comp_op: NOT IN •

    $default  reduce using rule 234 (comp_op)


State 335

   67 comp_op_expr_star: comp_op_expr_star comp_op expr •

    $default  reduce using rule 67 (comp_op_expr_star)


State 336

   69 or_xor_expr_star: or_xor_expr_star VBAR xor_expr •

    $default  reduce using rule 69 (or_xor_expr_star)


State 337

   71 xor_and_expr_star: xor_and_expr_star CIRCUMFLEX and_expr •

    $default  reduce using rule 71 (xor_and_expr_star)


State 338

   73 and_shift_expr_star: and_shift_expr_star AMPER shift_expr •

    $default  reduce using rule 73 (and_shift_expr_star)


State 339

   75 shift_arith_expr_star: shift_arith_expr_star LEFTSHIFT arith_expr •

    $default  reduce using rule 75 (shift_arith_expr_star)


State 340

   76 shift_arith_expr_star: shift_arith_expr_star RIGHTSHIFT arith_expr •

    $default  reduce using rule 76 (shift_arith_expr_star)


State 341

   79 op_term_star: op_term_star MINUS term •

    $default  reduce using rule 79 (op_term_star)


State 342

   78 op_term_star: op_term_star PLUS term •

    $default  reduce using rule 78 (op_term_star)


State 343

   82 op_factor_star: op_factor_star AT factor •

    $default  reduce using rule 82 (op_factor_star)


State 344

   85 op_factor_star: op_factor_star DOUBLESLASH factor •

    $default  reduce using rule 85 (op_factor_star)


State 345

   84 op_factor_star: op_factor_star PERCENT factor •

    $default  reduce using rule 84 (op_factor_star)


State 346

   83 op_factor_star: op_factor_star SLASH factor •

    $default  reduce using rule 83 (op_factor_star)


State 347

   81 op_factor_star: op_factor_star STAR factor •

    $default  reduce using rule 81 (op_factor_star)


State 348

   44 dot_name_star: dot_name_star DOT NAME •

    $default  reduce using rule 44 (dot_name_star)


State 349

  295 argument1: DOUBLESTAR test •

    $default  reduce using rule 295 (argument1)


State 350

  296 argument1: STAR test •

    $default  reduce using rule 296 (argument1)


State 351

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  294 argument1: test EQUAL • test

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 408
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 352

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  293 argument1: test COLONENQUAL • test

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 409
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 353

  292 argument1: test comp_for •

    $default  reduce using rule 292 (argument1)


State 354

    6 opt_par_arglist: LPAR arglist RPAR •

    $default  reduce using rule 6 (opt_par_arglist)


State 355

   14 comma_argument_star: comma_argument_star • COMMA opt_type_comment argument
   17 opt_comma: • %empty  [RPAR]
   18          | • COMMA
  290 arglist: argument1 comma_argument_star • opt_comma

    COMMA  shift, and go to state 410

    $default  reduce using rule 17 (opt_comma)

    opt_comma  go to state 411


State 356

  289 classdef: CLASS NAME opt_par_arglist COLON suite •

    $default  reduce using rule 289 (classdef)


State 357

   20 opt_colon_test: COLON • test
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 412
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 358

  127 tfpdef: NAME opt_colon_test •

    $default  reduce using rule 127 (tfpdef)


State 359

   14 comma_argument_star: comma_argument_star • COMMA opt_type_comment argument
  124 arguments: argument comma_argument_star •  [RPAR]

    COMMA  shift, and go to state 413

    $default  reduce using rule 124 (arguments)


State 360

  123 parameters: LPAR typedargslist RPAR •

    $default  reduce using rule 123 (parameters)


State 361

   16 opt_assign_test: EQUAL • test
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 414
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 362

  125 argument: tfpdef opt_assign_test •

    $default  reduce using rule 125 (argument)


State 363

   10 opt_arrow_test: ARROW test •

    $default  reduce using rule 10 (opt_arrow_test)


State 364

   11 opt_type_comment: • %empty  [ASSERT, AWAIT, BREAK, CONTINUE, DEL, ELLIPSIS, FALSE, FROM, GLOBAL, IMPORT, LAMBDA, LSQB, LBRACE, LPAR, MINUS, NAME, NEWLINE, NONE, NONLOCAL, NOT, NUMBER, PASS, PLUS, RAISE, RETURN, STAR, STRING, TILDE, TRUE, YIELD]
   12                 | • TYPE_COMMENT
  121 funcdef: DEF NAME parameters opt_arrow_test COLON • opt_type_comment func_body_suite

    TYPE_COMMENT  shift, and go to state 224

    $default  reduce using rule 11 (opt_type_comment)

    opt_type_comment  go to state 415


State 365

  103 comma_expr_star_expr_star: comma_expr_star_expr_star COMMA star_expr •

    $default  reduce using rule 103 (comma_expr_star_expr_star)


State 366

  102 comma_expr_star_expr_star: comma_expr_star_expr_star COMMA expr •

    $default  reduce using rule 102 (comma_expr_star_expr_star)


State 367

   11 opt_type_comment: • %empty  [ASSERT, AWAIT, BREAK, CONTINUE, DEL, ELLIPSIS, FALSE, FROM, GLOBAL, IMPORT, LAMBDA, LSQB, LBRACE, LPAR, MINUS, NAME, NEWLINE, NONE, NONLOCAL, NOT, NUMBER, PASS, PLUS, RAISE, RETURN, STAR, STRING, TILDE, TRUE, YIELD]
   12                 | • TYPE_COMMENT
  206 for_stmt: FOR exprlist IN testlist COLON • opt_type_comment suite opt_else_suite

    TYPE_COMMENT  shift, and go to state 224

    $default  reduce using rule 11 (opt_type_comment)

    opt_type_comment  go to state 416


State 368

  182 import_part: LPAR import_as_names • RPAR

    RPAR  shift, and go to state 417


State 369

  184 import_as_name: NAME opt_as_name •

    $default  reduce using rule 184 (import_as_name)


State 370

   17 opt_comma: • %empty  [NEWLINE, RPAR, SEMICOLON]
   18          | • COMMA
   40 comma_import_as_name_star: comma_import_as_name_star • COMMA import_as_name
  186 import_as_names: import_as_name comma_import_as_name_star • opt_comma

    COMMA  shift, and go to state 418

    $default  reduce using rule 17 (opt_comma)

    opt_comma  go to state 419


State 371

   46 comma_name_star: comma_name_star COMMA NAME •

    $default  reduce using rule 46 (comma_name_star)


State 372

   50 elif_test_suite_star: elif_test_suite_star • ELIF namedexpr_test COLON suite
   51 opt_else_suite: • ELSE COLON suite
  204 if_stmt: IF namedexpr_test COLON suite elif_test_suite_star • opt_else_suite

    ELIF  shift, and go to state 420
    ELSE  shift, and go to state 379

    opt_else_suite  go to state 421


State 373

   42 comma_dotted_as_name_star: comma_dotted_as_name_star COMMA dotted_as_name •

    $default  reduce using rule 42 (comma_dotted_as_name_star)


State 374

    7 decorator_plus: • decorator
    8               | • decorator_plus decorator
   59 stmt_plus: stmt_plus • stmt
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  115 decorator: • AT dotted_name opt_par_arglist NEWLINE
  116 decorators: • decorator_plus
  117 decorated: • decorators classdef
  118          | • decorators funcdef
  119          | • decorators async_funcdef
  121 funcdef: • DEF NAME parameters opt_arrow_test COLON opt_type_comment func_body_suite
  128 stmt: • simple_stmt
  129     | • compound_stmt
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  192 compound_stmt: • if_stmt
  193              | • while_stmt
  194              | • for_stmt
  195              | • try_stmt
  196              | • with_stmt
  197              | • funcdef
  198              | • classdef
  199              | • decorated
  200              | • async_stmt
  201 async_stmt: • ASYNC funcdef
  202           | • ASYNC with_stmt
  203           | • ASYNC for_stmt
  204 if_stmt: • IF namedexpr_test COLON suite elif_test_suite_star opt_else_suite
  205 while_stmt: • WHILE namedexpr_test COLON suite opt_else_suite
  206 for_stmt: • FOR exprlist IN testlist COLON opt_type_comment suite opt_else_suite
  207 try_stmt: • TRY COLON suite except_suite_plus opt_else_suite opt_finally_suite
  208         | • TRY COLON suite FINALLY COLON suite
  209 with_stmt: • WITH with_item comma_with_item_star COLON opt_type_comment suite
  213 suite: NEWLINE INDENT stmt_plus • DEDENT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  289 classdef: • CLASS NAME opt_par_arglist COLON suite
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    ASSERT    shift, and go to state 4
    ASYNC     shift, and go to state 5
    AT        shift, and go to state 6
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CLASS     shift, and go to state 9
    CONTINUE  shift, and go to state 10
    DEDENT    shift, and go to state 422
    DEF       shift, and go to state 11
    DEL       shift, and go to state 12
    FOR       shift, and go to state 14
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IF        shift, and go to state 17
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    TRY       shift, and go to state 30
    WITH      shift, and go to state 31
    WHILE     shift, and go to state 32
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    decorator_plus      go to state 34
    opt_await           go to state 35
    decorator           go to state 36
    decorators          go to state 37
    decorated           go to state 38
    funcdef             go to state 39
    stmt                go to state 423
    simple_stmt         go to state 41
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    compound_stmt       go to state 59
    async_stmt          go to state 60
    if_stmt             go to state 61
    while_stmt          go to state 62
    for_stmt            go to state 63
    try_stmt            go to state 64
    with_stmt           go to state 65
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    classdef            go to state 82
    yield_expr          go to state 83


State 375

   58 stmt_plus: stmt •

    $default  reduce using rule 58 (stmt_plus)


State 376

  211 except_clause: EXCEPT opt_test_as_name •

    $default  reduce using rule 211 (except_clause)


State 377

   37 opt_as_name: • %empty  [COLON]
   38            | • AS NAME
   57 opt_test_as_name: test • opt_as_name

    AS  shift, and go to state 188

    $default  reduce using rule 37 (opt_as_name)

    opt_as_name  go to state 424


State 378

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  208 try_stmt: TRY COLON suite FINALLY COLON • suite
  212 suite: • simple_stmt
  213      | • NEWLINE INDENT stmt_plus DEDENT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    ASSERT    shift, and go to state 4
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CONTINUE  shift, and go to state 10
    DEL       shift, and go to state 12
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NEWLINE   shift, and go to state 193
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await           go to state 35
    simple_stmt         go to state 194
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    suite               go to state 425
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_expr          go to state 83


State 379

   51 opt_else_suite: ELSE • COLON suite

    COLON  shift, and go to state 426


State 380

  111 opt_finally_suite: • %empty  [ASSERT, ASYNC, AT, AWAIT, BREAK, CLASS, CONTINUE, DEDENT, DEF, DEL, ELLIPSIS, ENDMARKER, FALSE, FOR, FROM, GLOBAL, IF, IMPORT, LAMBDA, LSQB, LBRACE, LPAR, MINUS, NAME, NEWLINE, NONE, NONLOCAL, NOT, NUMBER, PASS, PLUS, RAISE, RETURN, STAR, STRING, TILDE, TRUE, TRY, WITH, WHILE, YIELD]
  112                  | • FINALLY COLON suite
  207 try_stmt: TRY COLON suite except_suite_plus opt_else_suite • opt_finally_suite

    FINALLY  shift, and go to state 427

    $default  reduce using rule 111 (opt_finally_suite)

    opt_finally_suite  go to state 428


State 381

  110 except_suite_plus: except_suite_plus except_clause • COLON suite

    COLON  shift, and go to state 429


State 382

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  109 except_suite_plus: except_clause COLON • suite
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  212 suite: • simple_stmt
  213      | • NEWLINE INDENT stmt_plus DEDENT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    ASSERT    shift, and go to state 4
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CONTINUE  shift, and go to state 10
    DEL       shift, and go to state 12
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NEWLINE   shift, and go to state 193
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await           go to state 35
    simple_stmt         go to state 194
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    suite               go to state 430
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_expr          go to state 83


State 383

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  209 with_stmt: WITH with_item comma_with_item_star COLON opt_type_comment • suite
  212 suite: • simple_stmt
  213      | • NEWLINE INDENT stmt_plus DEDENT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    ASSERT    shift, and go to state 4
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CONTINUE  shift, and go to state 10
    DEL       shift, and go to state 12
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NEWLINE   shift, and go to state 193
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await           go to state 35
    simple_stmt         go to state 194
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    suite               go to state 431
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_expr          go to state 83


State 384

   53 comma_with_item_star: comma_with_item_star COMMA with_item •

    $default  reduce using rule 53 (comma_with_item_star)


State 385

  205 while_stmt: WHILE namedexpr_test COLON suite opt_else_suite •

    $default  reduce using rule 205 (while_stmt)


State 386

  302 comp_for: ASYNC sync_comp_for •

    $default  reduce using rule 302 (comp_for)


State 387

  299 sync_comp_for: FOR exprlist • IN or_test
  300              | FOR exprlist • IN or_test comp_iter

    IN  shift, and go to state 432


State 388

   18 opt_comma: COMMA •  [RSQB, RPAR]
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
   93 comma_namedexpr_test_star_expr_star: comma_namedexpr_test_star_expr_star COMMA • namedexpr_test
   94                                    | comma_namedexpr_test_star_expr_star COMMA • star_expr
  214 namedexpr_test: • test opt_colonass_test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    STAR    shift, and go to state 28
    TILDE   shift, and go to state 29

    RSQB      reduce using rule 18 (opt_comma)
    RPAR      reduce using rule 18 (opt_comma)
    $default  reduce using rule 86 (opt_await)

    opt_await       go to state 35
    namedexpr_test  go to state 433
    test            go to state 102
    lambdef         go to state 67
    or_test         go to state 68
    and_test        go to state 69
    not_test        go to state 70
    comparison      go to state 71
    star_expr       go to state 434
    expr            go to state 73
    xor_expr        go to state 74
    and_expr        go to state 75
    shift_expr      go to state 76
    arith_expr      go to state 77
    term            go to state 78
    factor          go to state 79
    power           go to state 80
    atom_expr       go to state 81


State 389

  266 testlist_comp: namedexpr_test comma_namedexpr_test_star_expr_star opt_comma •

    $default  reduce using rule 266 (testlist_comp)


State 390

  268 testlist_comp: star_expr comma_namedexpr_test_star_expr_star opt_comma •

    $default  reduce using rule 268 (testlist_comp)


State 391

   17 opt_comma: • %empty  [RBRACE]
   18          | • COMMA
  107 comma_dict1_star: comma_dict1_star • COMMA test COLON test
  108                 | comma_dict1_star • COMMA DOUBLESTAR expr
  284 dictorsetmaker1: DOUBLESTAR expr comma_dict1_star • opt_comma

    COMMA  shift, and go to state 435

    $default  reduce using rule 17 (opt_comma)

    opt_comma  go to state 436


State 392

  283 dictorsetmaker1: DOUBLESTAR expr comp_for •

    $default  reduce using rule 283 (dictorsetmaker1)


State 393

  106 comma_dict1_star: • %empty  [COMMA, RBRACE]
  107                 | • comma_dict1_star COMMA test COLON test
  108                 | • comma_dict1_star COMMA DOUBLESTAR expr
  281 dictorsetmaker1: test COLON test • comp_for
  282                | test COLON test • comma_dict1_star opt_comma
  299 sync_comp_for: • FOR exprlist IN or_test
  300              | • FOR exprlist IN or_test comp_iter
  301 comp_for: • sync_comp_for
  302         | • ASYNC sync_comp_for

    ASYNC  shift, and go to state 300
    FOR    shift, and go to state 301

    $default  reduce using rule 106 (comma_dict1_star)

    comma_dict1_star  go to state 437
    sync_comp_for     go to state 303
    comp_for          go to state 438


State 394

  286 dictorsetmaker2: test comma_test_star_expr_star opt_comma •

    $default  reduce using rule 286 (dictorsetmaker2)


State 395

  288 dictorsetmaker2: star_expr comma_test_star_expr_star opt_comma •

    $default  reduce using rule 288 (dictorsetmaker2)


State 396

  272 trailer: DOT NAME •

    $default  reduce using rule 272 (trailer)


State 397

  275 subscript: opt_test • COLON opt_test opt_sliceop

    COLON  shift, and go to state 439


State 398

   98 opt_test: test •  [COLON]
  274 subscript: test •  [COMMA, RSQB]

    COLON     reduce using rule 98 (opt_test)
    $default  reduce using rule 274 (subscript)


State 399

  271 trailer: LSQB subscriptlist • RSQB

    RSQB  shift, and go to state 440


State 400

   95 comma_subscript_star: • %empty
   96                     | • comma_subscript_star COMMA subscript
  273 subscriptlist: subscript • comma_subscript_star opt_comma

    $default  reduce using rule 95 (comma_subscript_star)

    comma_subscript_star  go to state 441


State 401

  269 trailer: LPAR RPAR •

    $default  reduce using rule 269 (trailer)


State 402

  270 trailer: LPAR arglist • RPAR

    RPAR  shift, and go to state 442


State 403

   31 opt_assing_yield_or_test: EQUAL testlist_star_expr •

    $default  reduce using rule 31 (opt_assing_yield_or_test)


State 404

   30 opt_assing_yield_or_test: EQUAL yield_expr •

    $default  reduce using rule 30 (opt_assing_yield_or_test)


State 405

   18 opt_comma: COMMA •  [COLON, NEWLINE, SEMICOLON]
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  105 comma_test_star: comma_test_star COMMA • test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    COLON      reduce using rule 18 (opt_comma)
    NEWLINE    reduce using rule 18 (opt_comma)
    SEMICOLON  reduce using rule 18 (opt_comma)
    $default   reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 443
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 406

  278 testlist: test comma_test_star opt_comma •

    $default  reduce using rule 278 (testlist)


State 407

  216 test: or_test IF or_test ELSE test •

    $default  reduce using rule 216 (test)


State 408

  294 argument1: test EQUAL test •

    $default  reduce using rule 294 (argument1)


State 409

  293 argument1: test COLONENQUAL test •

    $default  reduce using rule 293 (argument1)


State 410

   11 opt_type_comment: • %empty  [NAME]
   12                 | • TYPE_COMMENT
   14 comma_argument_star: comma_argument_star COMMA • opt_type_comment argument
   18 opt_comma: COMMA •  [RPAR]

    TYPE_COMMENT  shift, and go to state 224

    RPAR      reduce using rule 18 (opt_comma)
    $default  reduce using rule 11 (opt_type_comment)

    opt_type_comment  go to state 444


State 411

  290 arglist: argument1 comma_argument_star opt_comma •

    $default  reduce using rule 290 (arglist)


State 412

   20 opt_colon_test: COLON test •

    $default  reduce using rule 20 (opt_colon_test)


State 413

   11 opt_type_comment: • %empty  [NAME]
   12                 | • TYPE_COMMENT
   14 comma_argument_star: comma_argument_star COMMA • opt_type_comment argument

    TYPE_COMMENT  shift, and go to state 224

    $default  reduce using rule 11 (opt_type_comment)

    opt_type_comment  go to state 444


State 414

   16 opt_assign_test: EQUAL test •

    $default  reduce using rule 16 (opt_assign_test)


State 415

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  121 funcdef: DEF NAME parameters opt_arrow_test COLON opt_type_comment • func_body_suite
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg
  309 func_body_suite: • simple_stmt
  310                | • NEWLINE INDENT stmt_plus DEDENT
  311                | • NEWLINE TYPE_COMMENT NEWLINE INDENT stmt_plus DEDENT

    ASSERT    shift, and go to state 4
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CONTINUE  shift, and go to state 10
    DEL       shift, and go to state 12
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NEWLINE   shift, and go to state 445
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await           go to state 35
    simple_stmt         go to state 446
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_expr          go to state 83
    func_body_suite     go to state 447


State 416

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  206 for_stmt: FOR exprlist IN testlist COLON opt_type_comment • suite opt_else_suite
  212 suite: • simple_stmt
  213      | • NEWLINE INDENT stmt_plus DEDENT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    ASSERT    shift, and go to state 4
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CONTINUE  shift, and go to state 10
    DEL       shift, and go to state 12
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NEWLINE   shift, and go to state 193
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await           go to state 35
    simple_stmt         go to state 194
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    suite               go to state 448
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_expr          go to state 83


State 417

  182 import_part: LPAR import_as_names RPAR •

    $default  reduce using rule 182 (import_part)


State 418

   18 opt_comma: COMMA •  [NEWLINE, RPAR, SEMICOLON]
   40 comma_import_as_name_star: comma_import_as_name_star COMMA • import_as_name
  184 import_as_name: • NAME opt_as_name

    NAME  shift, and go to state 280

    $default  reduce using rule 18 (opt_comma)

    import_as_name  go to state 449


State 419

  186 import_as_names: import_as_name comma_import_as_name_star opt_comma •

    $default  reduce using rule 186 (import_as_names)


State 420

   50 elif_test_suite_star: elif_test_suite_star ELIF • namedexpr_test COLON suite
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  214 namedexpr_test: • test opt_colonass_test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await       go to state 35
    namedexpr_test  go to state 450
    test            go to state 102
    lambdef         go to state 67
    or_test         go to state 68
    and_test        go to state 69
    not_test        go to state 70
    comparison      go to state 71
    expr            go to state 73
    xor_expr        go to state 74
    and_expr        go to state 75
    shift_expr      go to state 76
    arith_expr      go to state 77
    term            go to state 78
    factor          go to state 79
    power           go to state 80
    atom_expr       go to state 81


State 421

  204 if_stmt: IF namedexpr_test COLON suite elif_test_suite_star opt_else_suite •

    $default  reduce using rule 204 (if_stmt)


State 422

  213 suite: NEWLINE INDENT stmt_plus DEDENT •

    $default  reduce using rule 213 (suite)


State 423

   59 stmt_plus: stmt_plus stmt •

    $default  reduce using rule 59 (stmt_plus)


State 424

   57 opt_test_as_name: test opt_as_name •

    $default  reduce using rule 57 (opt_test_as_name)


State 425

  208 try_stmt: TRY COLON suite FINALLY COLON suite •

    $default  reduce using rule 208 (try_stmt)


State 426

   51 opt_else_suite: ELSE COLON • suite
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  212 suite: • simple_stmt
  213      | • NEWLINE INDENT stmt_plus DEDENT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    ASSERT    shift, and go to state 4
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CONTINUE  shift, and go to state 10
    DEL       shift, and go to state 12
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NEWLINE   shift, and go to state 193
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await           go to state 35
    simple_stmt         go to state 194
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    suite               go to state 451
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_expr          go to state 83


State 427

  112 opt_finally_suite: FINALLY • COLON suite

    COLON  shift, and go to state 452


State 428

  207 try_stmt: TRY COLON suite except_suite_plus opt_else_suite opt_finally_suite •

    $default  reduce using rule 207 (try_stmt)


State 429

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  110 except_suite_plus: except_suite_plus except_clause COLON • suite
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  212 suite: • simple_stmt
  213      | • NEWLINE INDENT stmt_plus DEDENT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    ASSERT    shift, and go to state 4
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CONTINUE  shift, and go to state 10
    DEL       shift, and go to state 12
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NEWLINE   shift, and go to state 193
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await           go to state 35
    simple_stmt         go to state 194
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    suite               go to state 453
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_expr          go to state 83


State 430

  109 except_suite_plus: except_clause COLON suite •

    $default  reduce using rule 109 (except_suite_plus)


State 431

  209 with_stmt: WITH with_item comma_with_item_star COLON opt_type_comment suite •

    $default  reduce using rule 209 (with_stmt)


State 432

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  299 sync_comp_for: FOR exprlist IN • or_test
  300              | FOR exprlist IN • or_test comp_iter

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    NOT    shift, and go to state 23
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    or_test     go to state 454
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 433

   93 comma_namedexpr_test_star_expr_star: comma_namedexpr_test_star_expr_star COMMA namedexpr_test •

    $default  reduce using rule 93 (comma_namedexpr_test_star_expr_star)


State 434

   94 comma_namedexpr_test_star_expr_star: comma_namedexpr_test_star_expr_star COMMA star_expr •

    $default  reduce using rule 94 (comma_namedexpr_test_star_expr_star)


State 435

   18 opt_comma: COMMA •  [RBRACE]
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  107 comma_dict1_star: comma_dict1_star COMMA • test COLON test
  108                 | comma_dict1_star COMMA • DOUBLESTAR expr
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT       shift, and go to state 7
    DOUBLESTAR  shift, and go to state 455
    LAMBDA      shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 23
    PLUS        shift, and go to state 25
    TILDE       shift, and go to state 29

    RBRACE    reduce using rule 18 (opt_comma)
    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 456
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 436

  284 dictorsetmaker1: DOUBLESTAR expr comma_dict1_star opt_comma •

    $default  reduce using rule 284 (dictorsetmaker1)


State 437

   17 opt_comma: • %empty  [RBRACE]
   18          | • COMMA
  107 comma_dict1_star: comma_dict1_star • COMMA test COLON test
  108                 | comma_dict1_star • COMMA DOUBLESTAR expr
  282 dictorsetmaker1: test COLON test comma_dict1_star • opt_comma

    COMMA  shift, and go to state 435

    $default  reduce using rule 17 (opt_comma)

    opt_comma  go to state 457


State 438

  281 dictorsetmaker1: test COLON test comp_for •

    $default  reduce using rule 281 (dictorsetmaker1)


State 439

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
   97 opt_test: • %empty  [COLON, COMMA, RSQB]
   98         | • test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  275 subscript: opt_test COLON • opt_test opt_sliceop

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    COLON     reduce using rule 97 (opt_test)
    COMMA     reduce using rule 97 (opt_test)
    RSQB      reduce using rule 97 (opt_test)
    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    opt_test    go to state 458
    test        go to state 459
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 440

  271 trailer: LSQB subscriptlist RSQB •

    $default  reduce using rule 271 (trailer)


State 441

   17 opt_comma: • %empty  [RSQB]
   18          | • COMMA
   96 comma_subscript_star: comma_subscript_star • COMMA subscript
  273 subscriptlist: subscript comma_subscript_star • opt_comma

    COMMA  shift, and go to state 460

    $default  reduce using rule 17 (opt_comma)

    opt_comma  go to state 461


State 442

  270 trailer: LPAR arglist RPAR •

    $default  reduce using rule 270 (trailer)


State 443

  105 comma_test_star: comma_test_star COMMA test •

    $default  reduce using rule 105 (comma_test_star)


State 444

   14 comma_argument_star: comma_argument_star COMMA opt_type_comment • argument
  125 argument: • tfpdef opt_assign_test
  127 tfpdef: • NAME opt_colon_test

    NAME  shift, and go to state 268

    argument  go to state 462
    tfpdef    go to state 273


State 445

  310 func_body_suite: NEWLINE • INDENT stmt_plus DEDENT
  311                | NEWLINE • TYPE_COMMENT NEWLINE INDENT stmt_plus DEDENT

    INDENT        shift, and go to state 463
    TYPE_COMMENT  shift, and go to state 464


State 446

  309 func_body_suite: simple_stmt •

    $default  reduce using rule 309 (func_body_suite)


State 447

  121 funcdef: DEF NAME parameters opt_arrow_test COLON opt_type_comment func_body_suite •

    $default  reduce using rule 121 (funcdef)


State 448

   51 opt_else_suite: • ELSE COLON suite
  206 for_stmt: FOR exprlist IN testlist COLON opt_type_comment suite • opt_else_suite

    ELSE  shift, and go to state 379

    opt_else_suite  go to state 465


State 449

   40 comma_import_as_name_star: comma_import_as_name_star COMMA import_as_name •

    $default  reduce using rule 40 (comma_import_as_name_star)


State 450

   50 elif_test_suite_star: elif_test_suite_star ELIF namedexpr_test • COLON suite

    COLON  shift, and go to state 466


State 451

   51 opt_else_suite: ELSE COLON suite •

    $default  reduce using rule 51 (opt_else_suite)


State 452

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  112 opt_finally_suite: FINALLY COLON • suite
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  212 suite: • simple_stmt
  213      | • NEWLINE INDENT stmt_plus DEDENT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    ASSERT    shift, and go to state 4
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CONTINUE  shift, and go to state 10
    DEL       shift, and go to state 12
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NEWLINE   shift, and go to state 193
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await           go to state 35
    simple_stmt         go to state 194
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    suite               go to state 467
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_expr          go to state 83


State 453

  110 except_suite_plus: except_suite_plus except_clause COLON suite •

    $default  reduce using rule 110 (except_suite_plus)


State 454

  297 comp_iter: • comp_for
  298          | • comp_if
  299 sync_comp_for: • FOR exprlist IN or_test
  299              | FOR exprlist IN or_test •  [COMMA, RSQB, RBRACE, RPAR]
  300              | • FOR exprlist IN or_test comp_iter
  300              | FOR exprlist IN or_test • comp_iter
  301 comp_for: • sync_comp_for
  302         | • ASYNC sync_comp_for
  303 comp_if: • IF test_nocond
  304        | • IF test_nocond comp_iter

    ASYNC  shift, and go to state 300
    FOR    shift, and go to state 301
    IF     shift, and go to state 468

    $default  reduce using rule 299 (sync_comp_for)

    comp_iter      go to state 469
    sync_comp_for  go to state 303
    comp_for       go to state 470
    comp_if        go to state 471


State 455

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  108 comma_dict1_star: comma_dict1_star COMMA DOUBLESTAR • expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT  shift, and go to state 7
    MINUS  shift, and go to state 20
    PLUS   shift, and go to state 25
    TILDE  shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    expr        go to state 472
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 456

  107 comma_dict1_star: comma_dict1_star COMMA test • COLON test

    COLON  shift, and go to state 473


State 457

  282 dictorsetmaker1: test COLON test comma_dict1_star opt_comma •

    $default  reduce using rule 282 (dictorsetmaker1)


State 458

   99 opt_sliceop: • %empty  [COMMA, RSQB]
  100            | • sliceop
  275 subscript: opt_test COLON opt_test • opt_sliceop
  276 sliceop: • COLON opt_test

    COLON  shift, and go to state 474

    $default  reduce using rule 99 (opt_sliceop)

    opt_sliceop  go to state 475
    sliceop      go to state 476


State 459

   98 opt_test: test •

    $default  reduce using rule 98 (opt_test)


State 460

   18 opt_comma: COMMA •  [RSQB]
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
   96 comma_subscript_star: comma_subscript_star COMMA • subscript
   97 opt_test: • %empty  [COLON]
   98         | • test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  274 subscript: • test
  275          | • opt_test COLON opt_test opt_sliceop

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    COLON     reduce using rule 97 (opt_test)
    RSQB      reduce using rule 18 (opt_comma)
    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    opt_test    go to state 397
    test        go to state 398
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81
    subscript   go to state 477


State 461

  273 subscriptlist: subscript comma_subscript_star opt_comma •

    $default  reduce using rule 273 (subscriptlist)


State 462

   14 comma_argument_star: comma_argument_star COMMA opt_type_comment argument •

    $default  reduce using rule 14 (comma_argument_star)


State 463

    7 decorator_plus: • decorator
    8               | • decorator_plus decorator
   58 stmt_plus: • stmt
   59          | • stmt_plus stmt
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  115 decorator: • AT dotted_name opt_par_arglist NEWLINE
  116 decorators: • decorator_plus
  117 decorated: • decorators classdef
  118          | • decorators funcdef
  119          | • decorators async_funcdef
  121 funcdef: • DEF NAME parameters opt_arrow_test COLON opt_type_comment func_body_suite
  128 stmt: • simple_stmt
  129     | • compound_stmt
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  192 compound_stmt: • if_stmt
  193              | • while_stmt
  194              | • for_stmt
  195              | • try_stmt
  196              | • with_stmt
  197              | • funcdef
  198              | • classdef
  199              | • decorated
  200              | • async_stmt
  201 async_stmt: • ASYNC funcdef
  202           | • ASYNC with_stmt
  203           | • ASYNC for_stmt
  204 if_stmt: • IF namedexpr_test COLON suite elif_test_suite_star opt_else_suite
  205 while_stmt: • WHILE namedexpr_test COLON suite opt_else_suite
  206 for_stmt: • FOR exprlist IN testlist COLON opt_type_comment suite opt_else_suite
  207 try_stmt: • TRY COLON suite except_suite_plus opt_else_suite opt_finally_suite
  208         | • TRY COLON suite FINALLY COLON suite
  209 with_stmt: • WITH with_item comma_with_item_star COLON opt_type_comment suite
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  289 classdef: • CLASS NAME opt_par_arglist COLON suite
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg
  310 func_body_suite: NEWLINE INDENT • stmt_plus DEDENT

    ASSERT    shift, and go to state 4
    ASYNC     shift, and go to state 5
    AT        shift, and go to state 6
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CLASS     shift, and go to state 9
    CONTINUE  shift, and go to state 10
    DEF       shift, and go to state 11
    DEL       shift, and go to state 12
    FOR       shift, and go to state 14
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IF        shift, and go to state 17
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    TRY       shift, and go to state 30
    WITH      shift, and go to state 31
    WHILE     shift, and go to state 32
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    decorator_plus      go to state 34
    stmt_plus           go to state 478
    opt_await           go to state 35
    decorator           go to state 36
    decorators          go to state 37
    decorated           go to state 38
    funcdef             go to state 39
    stmt                go to state 375
    simple_stmt         go to state 41
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    compound_stmt       go to state 59
    async_stmt          go to state 60
    if_stmt             go to state 61
    while_stmt          go to state 62
    for_stmt            go to state 63
    try_stmt            go to state 64
    with_stmt           go to state 65
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    classdef            go to state 82
    yield_expr          go to state 83


State 464

  311 func_body_suite: NEWLINE TYPE_COMMENT • NEWLINE INDENT stmt_plus DEDENT

    NEWLINE  shift, and go to state 479


State 465

  206 for_stmt: FOR exprlist IN testlist COLON opt_type_comment suite opt_else_suite •

    $default  reduce using rule 206 (for_stmt)


State 466

   50 elif_test_suite_star: elif_test_suite_star ELIF namedexpr_test COLON • suite
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  212 suite: • simple_stmt
  213      | • NEWLINE INDENT stmt_plus DEDENT
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg

    ASSERT    shift, and go to state 4
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CONTINUE  shift, and go to state 10
    DEL       shift, and go to state 12
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NEWLINE   shift, and go to state 193
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    opt_await           go to state 35
    simple_stmt         go to state 194
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    suite               go to state 480
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    yield_expr          go to state 83


State 467

  112 opt_finally_suite: FINALLY COLON suite •

    $default  reduce using rule 112 (opt_finally_suite)


State 468

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  218 test_nocond: • or_test
  219            | • lambdef_nocond
  221 lambdef_nocond: • LAMBDA COLON test_nocond
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  303 comp_if: IF • test_nocond
  304        | IF • test_nocond comp_iter

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 481
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await       go to state 35
    test_nocond     go to state 482
    lambdef_nocond  go to state 483
    or_test         go to state 484
    and_test        go to state 69
    not_test        go to state 70
    comparison      go to state 71
    expr            go to state 73
    xor_expr        go to state 74
    and_expr        go to state 75
    shift_expr      go to state 76
    arith_expr      go to state 77
    term            go to state 78
    factor          go to state 79
    power           go to state 80
    atom_expr       go to state 81


State 469

  300 sync_comp_for: FOR exprlist IN or_test comp_iter •

    $default  reduce using rule 300 (sync_comp_for)


State 470

  297 comp_iter: comp_for •

    $default  reduce using rule 297 (comp_iter)


State 471

  298 comp_iter: comp_if •

    $default  reduce using rule 298 (comp_iter)


State 472

  108 comma_dict1_star: comma_dict1_star COMMA DOUBLESTAR expr •

    $default  reduce using rule 108 (comma_dict1_star)


State 473

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  107 comma_dict1_star: comma_dict1_star COMMA test COLON • test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    test        go to state 485
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 474

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
   97 opt_test: • %empty  [COMMA, RSQB]
   98         | • test
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  276 sliceop: COLON • opt_test

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    COMMA     reduce using rule 97 (opt_test)
    RSQB      reduce using rule 97 (opt_test)
    $default  reduce using rule 86 (opt_await)

    opt_await   go to state 35
    opt_test    go to state 486
    test        go to state 459
    lambdef     go to state 67
    or_test     go to state 68
    and_test    go to state 69
    not_test    go to state 70
    comparison  go to state 71
    expr        go to state 73
    xor_expr    go to state 74
    and_expr    go to state 75
    shift_expr  go to state 76
    arith_expr  go to state 77
    term        go to state 78
    factor      go to state 79
    power       go to state 80
    atom_expr   go to state 81


State 475

  275 subscript: opt_test COLON opt_test opt_sliceop •

    $default  reduce using rule 275 (subscript)


State 476

  100 opt_sliceop: sliceop •

    $default  reduce using rule 100 (opt_sliceop)


State 477

   96 comma_subscript_star: comma_subscript_star COMMA subscript •

    $default  reduce using rule 96 (comma_subscript_star)


State 478

    7 decorator_plus: • decorator
    8               | • decorator_plus decorator
   59 stmt_plus: stmt_plus • stmt
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  115 decorator: • AT dotted_name opt_par_arglist NEWLINE
  116 decorators: • decorator_plus
  117 decorated: • decorators classdef
  118          | • decorators funcdef
  119          | • decorators async_funcdef
  121 funcdef: • DEF NAME parameters opt_arrow_test COLON opt_type_comment func_body_suite
  128 stmt: • simple_stmt
  129     | • compound_stmt
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  192 compound_stmt: • if_stmt
  193              | • while_stmt
  194              | • for_stmt
  195              | • try_stmt
  196              | • with_stmt
  197              | • funcdef
  198              | • classdef
  199              | • decorated
  200              | • async_stmt
  201 async_stmt: • ASYNC funcdef
  202           | • ASYNC with_stmt
  203           | • ASYNC for_stmt
  204 if_stmt: • IF namedexpr_test COLON suite elif_test_suite_star opt_else_suite
  205 while_stmt: • WHILE namedexpr_test COLON suite opt_else_suite
  206 for_stmt: • FOR exprlist IN testlist COLON opt_type_comment suite opt_else_suite
  207 try_stmt: • TRY COLON suite except_suite_plus opt_else_suite opt_finally_suite
  208         | • TRY COLON suite FINALLY COLON suite
  209 with_stmt: • WITH with_item comma_with_item_star COLON opt_type_comment suite
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  289 classdef: • CLASS NAME opt_par_arglist COLON suite
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg
  310 func_body_suite: NEWLINE INDENT stmt_plus • DEDENT

    ASSERT    shift, and go to state 4
    ASYNC     shift, and go to state 5
    AT        shift, and go to state 6
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CLASS     shift, and go to state 9
    CONTINUE  shift, and go to state 10
    DEDENT    shift, and go to state 487
    DEF       shift, and go to state 11
    DEL       shift, and go to state 12
    FOR       shift, and go to state 14
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IF        shift, and go to state 17
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    TRY       shift, and go to state 30
    WITH      shift, and go to state 31
    WHILE     shift, and go to state 32
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    decorator_plus      go to state 34
    opt_await           go to state 35
    decorator           go to state 36
    decorators          go to state 37
    decorated           go to state 38
    funcdef             go to state 39
    stmt                go to state 423
    simple_stmt         go to state 41
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    compound_stmt       go to state 59
    async_stmt          go to state 60
    if_stmt             go to state 61
    while_stmt          go to state 62
    for_stmt            go to state 63
    try_stmt            go to state 64
    with_stmt           go to state 65
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    classdef            go to state 82
    yield_expr          go to state 83


State 479

  311 func_body_suite: NEWLINE TYPE_COMMENT NEWLINE • INDENT stmt_plus DEDENT

    INDENT  shift, and go to state 488


State 480

   50 elif_test_suite_star: elif_test_suite_star ELIF namedexpr_test COLON suite •

    $default  reduce using rule 50 (elif_test_suite_star)


State 481

  221 lambdef_nocond: LAMBDA • COLON test_nocond

    COLON  shift, and go to state 489


State 482

  297 comp_iter: • comp_for
  298          | • comp_if
  299 sync_comp_for: • FOR exprlist IN or_test
  300              | • FOR exprlist IN or_test comp_iter
  301 comp_for: • sync_comp_for
  302         | • ASYNC sync_comp_for
  303 comp_if: • IF test_nocond
  303        | IF test_nocond •  [COMMA, RSQB, RBRACE, RPAR]
  304        | • IF test_nocond comp_iter
  304        | IF test_nocond • comp_iter

    ASYNC  shift, and go to state 300
    FOR    shift, and go to state 301
    IF     shift, and go to state 468

    $default  reduce using rule 303 (comp_if)

    comp_iter      go to state 490
    sync_comp_for  go to state 303
    comp_for       go to state 470
    comp_if        go to state 471


State 483

  219 test_nocond: lambdef_nocond •

    $default  reduce using rule 219 (test_nocond)


State 484

  218 test_nocond: or_test •

    $default  reduce using rule 218 (test_nocond)


State 485

  107 comma_dict1_star: comma_dict1_star COMMA test COLON test •

    $default  reduce using rule 107 (comma_dict1_star)


State 486

  276 sliceop: COLON opt_test •

    $default  reduce using rule 276 (sliceop)


State 487

  310 func_body_suite: NEWLINE INDENT stmt_plus DEDENT •

    $default  reduce using rule 310 (func_body_suite)


State 488

    7 decorator_plus: • decorator
    8               | • decorator_plus decorator
   58 stmt_plus: • stmt
   59          | • stmt_plus stmt
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  115 decorator: • AT dotted_name opt_par_arglist NEWLINE
  116 decorators: • decorator_plus
  117 decorated: • decorators classdef
  118          | • decorators funcdef
  119          | • decorators async_funcdef
  121 funcdef: • DEF NAME parameters opt_arrow_test COLON opt_type_comment func_body_suite
  128 stmt: • simple_stmt
  129     | • compound_stmt
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  192 compound_stmt: • if_stmt
  193              | • while_stmt
  194              | • for_stmt
  195              | • try_stmt
  196              | • with_stmt
  197              | • funcdef
  198              | • classdef
  199              | • decorated
  200              | • async_stmt
  201 async_stmt: • ASYNC funcdef
  202           | • ASYNC with_stmt
  203           | • ASYNC for_stmt
  204 if_stmt: • IF namedexpr_test COLON suite elif_test_suite_star opt_else_suite
  205 while_stmt: • WHILE namedexpr_test COLON suite opt_else_suite
  206 for_stmt: • FOR exprlist IN testlist COLON opt_type_comment suite opt_else_suite
  207 try_stmt: • TRY COLON suite except_suite_plus opt_else_suite opt_finally_suite
  208         | • TRY COLON suite FINALLY COLON suite
  209 with_stmt: • WITH with_item comma_with_item_star COLON opt_type_comment suite
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  289 classdef: • CLASS NAME opt_par_arglist COLON suite
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg
  311 func_body_suite: NEWLINE TYPE_COMMENT NEWLINE INDENT • stmt_plus DEDENT

    ASSERT    shift, and go to state 4
    ASYNC     shift, and go to state 5
    AT        shift, and go to state 6
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CLASS     shift, and go to state 9
    CONTINUE  shift, and go to state 10
    DEF       shift, and go to state 11
    DEL       shift, and go to state 12
    FOR       shift, and go to state 14
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IF        shift, and go to state 17
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    TRY       shift, and go to state 30
    WITH      shift, and go to state 31
    WHILE     shift, and go to state 32
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    decorator_plus      go to state 34
    stmt_plus           go to state 491
    opt_await           go to state 35
    decorator           go to state 36
    decorators          go to state 37
    decorated           go to state 38
    funcdef             go to state 39
    stmt                go to state 375
    simple_stmt         go to state 41
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    compound_stmt       go to state 59
    async_stmt          go to state 60
    if_stmt             go to state 61
    while_stmt          go to state 62
    for_stmt            go to state 63
    try_stmt            go to state 64
    with_stmt           go to state 65
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    classdef            go to state 82
    yield_expr          go to state 83


State 489

   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  218 test_nocond: • or_test
  219            | • lambdef_nocond
  221 lambdef_nocond: • LAMBDA COLON test_nocond
  221               | LAMBDA COLON • test_nocond
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star

    AWAIT   shift, and go to state 7
    LAMBDA  shift, and go to state 481
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 23
    PLUS    shift, and go to state 25
    TILDE   shift, and go to state 29

    $default  reduce using rule 86 (opt_await)

    opt_await       go to state 35
    test_nocond     go to state 492
    lambdef_nocond  go to state 483
    or_test         go to state 484
    and_test        go to state 69
    not_test        go to state 70
    comparison      go to state 71
    expr            go to state 73
    xor_expr        go to state 74
    and_expr        go to state 75
    shift_expr      go to state 76
    arith_expr      go to state 77
    term            go to state 78
    factor          go to state 79
    power           go to state 80
    atom_expr       go to state 81


State 490

  304 comp_if: IF test_nocond comp_iter •

    $default  reduce using rule 304 (comp_if)


State 491

    7 decorator_plus: • decorator
    8               | • decorator_plus decorator
   59 stmt_plus: stmt_plus • stmt
   86 opt_await: • %empty  [ELLIPSIS, FALSE, LSQB, LBRACE, LPAR, NAME, NONE, NUMBER, STRING, TRUE]
   87          | • AWAIT
  115 decorator: • AT dotted_name opt_par_arglist NEWLINE
  116 decorators: • decorator_plus
  117 decorated: • decorators classdef
  118          | • decorators funcdef
  119          | • decorators async_funcdef
  121 funcdef: • DEF NAME parameters opt_arrow_test COLON opt_type_comment func_body_suite
  128 stmt: • simple_stmt
  129     | • compound_stmt
  130 simple_stmt: • small_stmt semi_small_stmt_star opt_semi NEWLINE
  131 small_stmt: • expr_stmt
  132           | • del_stmt
  133           | • pass_stmt
  134           | • flow_stmt
  135           | • import_stmt
  136           | • global_stmt
  137           | • nonlocal_stmt
  138           | • assert_stmt
  139 expr_stmt: • testlist_star_expr annassign
  140          | • testlist_star_expr augassign yield_expr
  141          | • testlist_star_expr augassign testlist
  142          | • testlist_star_expr
  143          | • testlist_star_expr assing_yield_or_test_plus opt_type_comment
  145 testlist_star_expr: • test comma_test_star_expr_star opt_comma
  146                   | • star_expr comma_test_star_expr_star opt_comma
  160 del_stmt: • DEL exprlist
  161 pass_stmt: • PASS
  162 flow_stmt: • break_stmt
  163          | • continue_stmt
  164          | • return_stmt
  165          | • raise_stmt
  166          | • yield_stmt
  167 break_stmt: • BREAK
  168 continue_stmt: • CONTINUE
  169 return_stmt: • RETURN opt_testlist_star_expr
  170 yield_stmt: • yield_expr
  171 raise_stmt: • RAISE
  172           | • RAISE test
  173           | • RAISE test FROM test
  174 import_stmt: • import_name
  175            | • import_from
  176 import_name: • IMPORT dotted_as_names
  177 import_from: • FROM from_part IMPORT import_part
  189 global_stmt: • GLOBAL NAME comma_name_star
  190 nonlocal_stmt: • NONLOCAL NAME comma_name_star
  191 assert_stmt: • ASSERT test opt_comma_test
  192 compound_stmt: • if_stmt
  193              | • while_stmt
  194              | • for_stmt
  195              | • try_stmt
  196              | • with_stmt
  197              | • funcdef
  198              | • classdef
  199              | • decorated
  200              | • async_stmt
  201 async_stmt: • ASYNC funcdef
  202           | • ASYNC with_stmt
  203           | • ASYNC for_stmt
  204 if_stmt: • IF namedexpr_test COLON suite elif_test_suite_star opt_else_suite
  205 while_stmt: • WHILE namedexpr_test COLON suite opt_else_suite
  206 for_stmt: • FOR exprlist IN testlist COLON opt_type_comment suite opt_else_suite
  207 try_stmt: • TRY COLON suite except_suite_plus opt_else_suite opt_finally_suite
  208         | • TRY COLON suite FINALLY COLON suite
  209 with_stmt: • WITH with_item comma_with_item_star COLON opt_type_comment suite
  215 test: • or_test
  216     | • or_test IF or_test ELSE test
  217     | • lambdef
  220 lambdef: • LAMBDA COLON test
  222 or_test: • and_test or_and_test_star
  223 and_test: • not_test and_not_test_star
  224 not_test: • NOT not_test
  225         | • comparison
  226 comparison: • expr comp_op_expr_star
  237 star_expr: • STAR expr
  238 expr: • xor_expr or_xor_expr_star
  239 xor_expr: • and_expr xor_and_expr_star
  240 and_expr: • shift_expr and_shift_expr_star
  241 shift_expr: • arith_expr shift_arith_expr_star
  242 arith_expr: • term op_term_star
  243 term: • factor op_factor_star
  244 factor: • PLUS factor
  245       | • MINUS factor
  246       | • TILDE factor
  247       | • power
  248 power: • atom_expr
  249      | • atom_expr DOUBLESTAR factor
  250 atom_expr: • opt_await atom trailer_star
  289 classdef: • CLASS NAME opt_par_arglist COLON suite
  305 yield_expr: • YIELD
  306           | • YIELD yield_arg
  311 func_body_suite: NEWLINE TYPE_COMMENT NEWLINE INDENT stmt_plus • DEDENT

    ASSERT    shift, and go to state 4
    ASYNC     shift, and go to state 5
    AT        shift, and go to state 6
    AWAIT     shift, and go to state 7
    BREAK     shift, and go to state 8
    CLASS     shift, and go to state 9
    CONTINUE  shift, and go to state 10
    DEDENT    shift, and go to state 493
    DEF       shift, and go to state 11
    DEL       shift, and go to state 12
    FOR       shift, and go to state 14
    FROM      shift, and go to state 15
    GLOBAL    shift, and go to state 16
    IF        shift, and go to state 17
    IMPORT    shift, and go to state 18
    LAMBDA    shift, and go to state 19
    MINUS     shift, and go to state 20
    NONLOCAL  shift, and go to state 22
    NOT       shift, and go to state 23
    PASS      shift, and go to state 24
    PLUS      shift, and go to state 25
    RAISE     shift, and go to state 26
    RETURN    shift, and go to state 27
    STAR      shift, and go to state 28
    TILDE     shift, and go to state 29
    TRY       shift, and go to state 30
    WITH      shift, and go to state 31
    WHILE     shift, and go to state 32
    YIELD     shift, and go to state 33

    $default  reduce using rule 86 (opt_await)

    decorator_plus      go to state 34
    opt_await           go to state 35
    decorator           go to state 36
    decorators          go to state 37
    decorated           go to state 38
    funcdef             go to state 39
    stmt                go to state 423
    simple_stmt         go to state 41
    small_stmt          go to state 42
    expr_stmt           go to state 43
    testlist_star_expr  go to state 44
    del_stmt            go to state 45
    pass_stmt           go to state 46
    flow_stmt           go to state 47
    break_stmt          go to state 48
    continue_stmt       go to state 49
    return_stmt         go to state 50
    yield_stmt          go to state 51
    raise_stmt          go to state 52
    import_stmt         go to state 53
    import_name         go to state 54
    import_from         go to state 55
    global_stmt         go to state 56
    nonlocal_stmt       go to state 57
    assert_stmt         go to state 58
    compound_stmt       go to state 59
    async_stmt          go to state 60
    if_stmt             go to state 61
    while_stmt          go to state 62
    for_stmt            go to state 63
    try_stmt            go to state 64
    with_stmt           go to state 65
    test                go to state 66
    lambdef             go to state 67
    or_test             go to state 68
    and_test            go to state 69
    not_test            go to state 70
    comparison          go to state 71
    star_expr           go to state 72
    expr                go to state 73
    xor_expr            go to state 74
    and_expr            go to state 75
    shift_expr          go to state 76
    arith_expr          go to state 77
    term                go to state 78
    factor              go to state 79
    power               go to state 80
    atom_expr           go to state 81
    classdef            go to state 82
    yield_expr          go to state 83


State 492

  221 lambdef_nocond: LAMBDA COLON test_nocond •

    $default  reduce using rule 221 (lambdef_nocond)


State 493

  311 func_body_suite: NEWLINE TYPE_COMMENT NEWLINE INDENT stmt_plus DEDENT •

    $default  reduce using rule 311 (func_body_suite)
